swagger: '2.0'
info:
  version: 1.0.0
  title: 'Harvestapp API'
  license:
    name: MIT
externalDocs:
  description: 'Learn more about the Harvest Web API'
  url: 'https://help.getharvest.com/api-v2/'
host: api.harvestapp.com
basePath: /v2
schemes:
  - https
securityDefinitions:
  BearerAuth:
    type: apiKey
    in: header
    name: Authorization
  AccountAuth:
    type: apiKey
    in: header
    name: Harvest-Account-Id
security:
  -
    BearerAuth: []
    AccountAuth: []
paths:
  /contacts:
    get:
      summary: 'List all contacts'
      operationId: listContacts
      description: "Returns a list of your contacts. The contacts are returned sorted by creation date, with the most recently created contacts appearing first.\n\nThe response contains an object with a contacts property that contains an array of up to per_page contacts. Each entry in the array is a separate contact object. If no more contacts are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your contacts."
      externalDocs:
        description: 'List all contacts'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/contacts/#list-all-contacts'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: client_id
          description: 'Only return contacts belonging to the client with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: updated_since
          description: 'Only return contacts that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all contacts'
          schema:
            $ref: '#/definitions/Contacts'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a contact'
      operationId: createContact
      description: 'Creates a new contact object. Returns a contact object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a contact'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/contacts/#create-a-contact'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client associated with this contact.'
                format: int32
              title:
                type: string
                description: 'The title of the contact.'
              first_name:
                type: string
                description: 'The first name of the contact.'
              last_name:
                type: string
                description: 'The last name of the contact.'
              email:
                type: string
                description: 'The contact’s email address.'
                format: email
              phone_office:
                type: string
                description: 'The contact’s office phone number.'
              phone_mobile:
                type: string
                description: 'The contact’s mobile phone number.'
              fax:
                type: string
                description: 'The contact’s fax number.'
            required:
              - client_id
              - first_name
      responses:
        201:
          description: 'Create a contact'
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/contacts/{contactId}':
    get:
      summary: 'Retrieve a contact'
      operationId: retrieveContact
      description: 'Retrieves the contact with the given ID. Returns a contact object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a contact'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/contacts/#retrieve-a-contact'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: contactId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a contact'
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a contact'
      operationId: updateContact
      description: 'Updates the specific contact by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a contact object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a contact'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/contacts/#update-a-contact'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: contactId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client associated with this contact.'
                format: int32
              title:
                type: string
                description: 'The title of the contact.'
              first_name:
                type: string
                description: 'The first name of the contact.'
              last_name:
                type: string
                description: 'The last name of the contact.'
              email:
                type: string
                description: 'The contact’s email address.'
                format: email
              phone_office:
                type: string
                description: 'The contact’s office phone number.'
              phone_mobile:
                type: string
                description: 'The contact’s mobile phone number.'
              fax:
                type: string
                description: 'The contact’s fax number.'
      responses:
        200:
          description: 'Update a contact'
          schema:
            $ref: '#/definitions/Contact'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a contact'
      operationId: deleteContact
      description: 'Delete a contact. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a contact'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/contacts/#delete-a-contact'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: contactId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a contact'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /clients:
    get:
      summary: 'List all clients'
      operationId: listClients
      description: "Returns a list of your clients. The clients are returned sorted by creation date, with the most recently created clients appearing first.\n\nThe response contains an object with a clients property that contains an array of up to per_page clients. Each entry in the array is a separate client object. If no more clients are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your clients."
      externalDocs:
        description: 'List all clients'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/clients/#list-all-clients'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: is_active
          description: 'Pass true to only return active clients and false to return inactive clients.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return clients that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all clients'
          schema:
            $ref: '#/definitions/Clients'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a client'
      operationId: createClient
      description: 'Creates a new client object. Returns a client object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a client'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/clients/#create-a-client'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'A textual description of the client.'
              is_active:
                type: boolean
                description: 'Whether the client is active, or archived. Defaults to true.'
              address:
                type: string
                description: 'A textual representation of the client’s physical address. May include new line characters.'
              currency:
                type: string
                description: 'The currency used by the client. If not provided, the company’s currency will be used. See a list of supported currencies'
            required:
              - name
      responses:
        201:
          description: 'Create a client'
          schema:
            $ref: '#/definitions/Client'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/clients/{clientId}':
    get:
      summary: 'Retrieve a client'
      operationId: retrieveClient
      description: 'Retrieves the client with the given ID. Returns a client object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a client'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/clients/#retrieve-a-client'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: clientId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a client'
          schema:
            $ref: '#/definitions/Client'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a client'
      operationId: updateClient
      description: 'Updates the specific client by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a client object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a client'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/clients/#update-a-client'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: clientId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'A textual description of the client.'
              is_active:
                type: boolean
                description: 'Whether the client is active, or archived.'
              address:
                type: string
                description: 'A textual representation of the client’s physical address. May include new line characters.'
              currency:
                type: string
                description: 'The currency used by the client. See a list of supported currencies'
      responses:
        200:
          description: 'Update a client'
          schema:
            $ref: '#/definitions/Client'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a client'
      operationId: deleteClient
      description: 'Delete a client. Deleting a client is only possible if it has no projects, invoices, or estimates associated with it. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a client'
        url: 'https://help.getharvest.com/api-v2/clients-api/clients/clients/#delete-a-client'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: clientId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a client'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /company:
    get:
      summary: 'Retrieve a company'
      operationId: retrieveCompany
      description: "Retrieves the company for the currently authenticated user. Returns a\ncompany object and a 200 OK response code."
      externalDocs:
        description: 'Retrieve a company'
        url: 'https://help.getharvest.com/api-v2/company-api/company/company/#retrieve-a-company'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters: []
      responses:
        200:
          description: 'Retrieve a company'
          schema:
            $ref: '#/definitions/Company'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a company'
      operationId: updateCompany
      description: 'Updates the company setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a company object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a company'
        url: 'https://help.getharvest.com/api-v2/company-api/company/company/#update-a-company'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              wants_timestamp_timers:
                type: boolean
                description: 'Whether time is tracked via duration or start and end times.'
              weekly_capacity:
                type: integer
                description: 'The weekly capacity in seconds.'
                format: int32
      responses:
        200:
          description: 'Update a company'
          schema:
            $ref: '#/definitions/Company'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/invoices/{invoiceId}/messages':
    get:
      summary: 'List all messages for an invoice'
      operationId: listMessagesForInvoice
      description: "Returns a list of messages associated with a given invoice. The invoice messages are returned sorted by creation date, with the most recently created messages appearing first.\n\nThe response contains an object with an invoice_messages property that contains an array of up to per_page messages. Each entry in the array is a separate message object. If no more messages are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your messages."
      externalDocs:
        description: 'List all messages for an invoice'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-messages/#list-all-messages-for-an-invoice'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: updated_since
          description: 'Only return invoice messages that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all messages for an invoice'
          schema:
            $ref: '#/definitions/InvoiceMessages'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Mark an open invoice as a draft'
      operationId: markOpenInvoiceAsDraft
      description: 'Creates a new invoice message object and marks an open invoice as a draft. Returns an invoice message object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Mark an open invoice as a draft'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-messages/#mark-an-open-invoice-as-a-draft'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              event_type:
                type: string
                description: 'Pass “draft” to mark the invoice as a draft.'
            required:
              - event_type
      responses:
        200:
          description: 'Mark an open invoice as a draft'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/invoices/{invoiceId}/messages/{messageId}':
    delete:
      summary: 'Delete an invoice message'
      operationId: deleteInvoiceMessage
      description: 'Delete an invoice message. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an invoice message'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-messages/#delete-an-invoice-message'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: messageId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an invoice message'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/invoices/{invoiceId}/payments':
    get:
      summary: 'List all payments for an invoice'
      operationId: listPaymentsForInvoice
      description: "Returns a list of payments associate with a given invoice. The payments are returned sorted by creation date, with the most recently created payments appearing first.\n\nThe response contains an object with an invoice_payments property that contains an array of up to per_page payments. Each entry in the array is a separate payment object. If no more payments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your payments."
      externalDocs:
        description: 'List all payments for an invoice'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-payments/#list-all-payments-for-an-invoice'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: updated_since
          description: 'Only return invoice payments that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all payments for an invoice'
          schema:
            $ref: '#/definitions/InvoicePayments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an invoice payment'
      operationId: createInvoicePayment
      description: 'Creates a new invoice payment object. Returns an invoice payment object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an invoice payment'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-payments/#create-an-invoice-payment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              amount:
                type: number
                description: 'The amount of the payment.'
                format: float
              paid_at:
                type: string
                description: 'Date and time the payment was made. Pass either paid_at or paid_date, but not both.'
                format: date-time
              paid_date:
                type: string
                description: 'Date the payment was made. Pass either paid_at or paid_date, but not both.'
                format: date
              notes:
                type: string
                description: 'Any notes to be associated with the payment.'
            required:
              - amount
      responses:
        201:
          description: 'Create an invoice payment'
          schema:
            $ref: '#/definitions/InvoicePayment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/invoices/{invoiceId}/payments/{paymentId}':
    delete:
      summary: 'Delete an invoice payment'
      operationId: deleteInvoicePayment
      description: 'Delete an invoice payment. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an invoice payment'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-payments/#delete-an-invoice-payment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: paymentId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an invoice payment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /invoices:
    get:
      summary: 'List all invoices'
      operationId: listInvoices
      description: "Returns a list of your invoices. The invoices are returned sorted by issue date, with the most recently issued invoices appearing first.\n\nThe response contains an object with a invoices property that contains an array of up to per_page invoices. Each entry in the array is a separate invoice object. If no more invoices are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your invoices."
      externalDocs:
        description: 'List all invoices'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#list-all-invoices'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: client_id
          description: 'Only return invoices belonging to the client with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: project_id
          description: 'Only return invoices associated with the project with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: updated_since
          description: 'Only return invoices that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: from
          description: 'Only return invoices with an issue_date on or after the given date.'
          required: false
          in: query
          type: string
        -
          name: to
          description: 'Only return invoices with an issue_date on or before the given date.'
          required: false
          in: query
          type: string
        -
          name: state
          description: 'Only return invoices with a state matching the value provided. Options: draft, open, paid, or closed.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all invoices'
          schema:
            $ref: '#/definitions/Invoices'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an invoice based on tracked time and expenses'
      operationId: createInvoiceBasedOnTrackedTimeAndExpenses
      description: 'Creates a new invoice object. Returns an invoice object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an invoice based on tracked time and expenses'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#create-an-invoice-based-on-tracked-time-and-expenses'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client this invoice belongs to.'
                format: int32
              retainer_id:
                type: integer
                description: 'The ID of the retainer associated with this invoice.'
                format: int32
              estimate_id:
                type: integer
                description: 'The ID of the estimate associated with this invoice.'
                format: int32
              number:
                type: string
                description: 'If no value is set, the number will be automatically generated.'
              purchase_order:
                type: string
                description: 'The purchase order number.'
              tax:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              tax2:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              discount:
                type: number
                description: 'This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%.'
                format: float
              subject:
                type: string
                description: 'The invoice subject.'
              notes:
                type: string
                description: 'Any additional notes to include on the invoice.'
              currency:
                type: string
                description: 'The currency used by the invoice. If not provided, the client’s currency will be used. See a list of supported currencies'
              issue_date:
                type: string
                description: 'Date the invoice was issued. Defaults to today’s date.'
                format: date
              due_date:
                type: string
                description: 'Date the invoice is due. Defaults to the issue_date if no payment_term is specified. To set a custom due_date the payment_term must also be set to custom, otherwise the value supplied in the request for due_date will be ignored and the due_date will be calucated using the issue_date and the payment_term.'
                format: date
              payment_term:
                type: string
                description: 'The timeframe in which the invoice should be paid. Defaults to custom. Options: upon receipt, net 15, net 30, net 45, net 60, or custom.'
              line_items_import:
                type: object
                description: 'An line items import object'
            required:
              - client_id
      responses:
        201:
          description: 'Create an invoice based on tracked time and expenses'
          schema:
            $ref: '#/definitions/Invoice'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/invoices/{invoiceId}':
    get:
      summary: 'Retrieve an invoice'
      operationId: retrieveInvoice
      description: 'Retrieves the invoice with the given ID. Returns an invoice object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve an invoice'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#retrieve-an-invoice'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve an invoice'
          schema:
            $ref: '#/definitions/Invoice'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update an invoice'
      operationId: updateInvoice
      description: 'Updates the specific invoice by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an invoice object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update an invoice'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#update-an-invoice'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client this invoice belongs to.'
                format: int32
              retainer_id:
                type: integer
                description: 'The ID of the retainer associated with this invoice.'
                format: int32
              estimate_id:
                type: integer
                description: 'The ID of the estimate associated with this invoice.'
                format: int32
              number:
                type: string
                description: 'If no value is set, the number will be automatically generated.'
              purchase_order:
                type: string
                description: 'The purchase order number.'
              tax:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              tax2:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              discount:
                type: number
                description: 'This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%.'
                format: float
              subject:
                type: string
                description: 'The invoice subject.'
              notes:
                type: string
                description: 'Any additional notes to include on the invoice.'
              currency:
                type: string
                description: 'The currency used by the invoice. If not provided, the client’s currency will be used. See a list of supported currencies'
              issue_date:
                type: string
                description: 'Date the invoice was issued.'
                format: date
              due_date:
                type: string
                description: 'Date the invoice is due.'
                format: date
              payment_term:
                type: string
                description: 'The timeframe in which the invoice should be paid. Options: upon receipt, net 15, net 30, net 45, or net 60.'
              line_items:
                type: array
                description: 'Array of line item parameters'
                items:
                  type: object
                  required:
                    - project_ids
                  properties:
                    project_ids:
                      description: 'An array of the client’s project IDs you’d like to include time/expenses from.'
                      type: array
                      items:
                        type: integer
                    time:
                      description: 'An time import object.'
                      type: object
                      required:
                        - summary_type
                      properties:
                        summary_type:
                          type: string
                          description: 'How to summarize the time entries per line item. Options: project, task, people, or detailed.'
                        from:
                          type: string
                          format: date
                          description: 'Start date for included time entries. Must be provided if to is present. If neither from or to are provided, all unbilled time entries will be included.'
                        to:
                          type: string
                          format: date
                          description: 'End date for included time entries. Must be provided if from is present. If neither from or to are provided, all unbilled time entries will be included.'
                    expenses:
                      description: 'An expense import object.'
                      type: object
                      required:
                        - summary_type
                      properties:
                        summary_type:
                          type: string
                          description: 'How to summarize the expenses per line item. Options: project, category, people, or detailed.'
                        from:
                          type: string
                          format: date
                          description: 'Start date for included expenses. Must be provided if to is present. If neither from or to are provided, all unbilled expenses will be included.'
                        to:
                          type: string
                          format: date
                          description: 'End date for included expenses. Must be provided if from is present. If neither from or to are provided, all unbilled expenses will be included.'
                        attach_receipt:
                          type: boolean
                          description: 'If set to true, a PDF containing an expense report with receipts will be attached to the invoice. Defaults to false.'
      responses:
        200:
          description: 'Update an invoice'
          schema:
            $ref: '#/definitions/Invoice'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete an invoice'
      operationId: deleteInvoice
      description: 'Delete an invoice. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an invoice'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#delete-an-invoice'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an invoice'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /invoice_item_categories:
    get:
      summary: 'List all invoice item categories'
      operationId: listInvoiceItemCategories
      description: "Returns a list of your invoice item categories. The invoice item categories are returned sorted by creation date, with the most recently created invoice item categories appearing first.\n\nThe response contains an object with a invoice_item_categories property that contains an array of up to per_page invoice item categories. Each entry in the array is a separate invoice item category object. If no more invoice item categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your invoice item categories."
      externalDocs:
        description: 'List all invoice item categories'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-item-categories/#list-all-invoice-item-categories'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: updated_since
          description: 'Only return invoice item categories that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all invoice item categories'
          schema:
            $ref: '#/definitions/InvoiceItemCategories'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an invoice item category'
      operationId: createInvoiceItemCategory
      description: 'Creates a new invoice item category object. Returns an invoice item category object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an invoice item category'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-item-categories/#create-an-invoice-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the invoice item category.'
            required:
              - name
      responses:
        201:
          description: 'Create an invoice item category'
          schema:
            $ref: '#/definitions/InvoiceItemCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/invoice_item_categories/{invoiceItemCategoryId}':
    get:
      summary: 'Retrieve an invoice item category'
      operationId: retrieveInvoiceItemCategory
      description: 'Retrieves the invoice item category with the given ID. Returns an invoice item category object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve an invoice item category'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-item-categories/#retrieve-an-invoice-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceItemCategoryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve an invoice item category'
          schema:
            $ref: '#/definitions/InvoiceItemCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update an invoice item category'
      operationId: updateInvoiceItemCategory
      description: 'Updates the specific invoice item category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an invoice item category object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update an invoice item category'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-item-categories/#update-an-invoice-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceItemCategoryId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the invoice item category.'
      responses:
        200:
          description: 'Update an invoice item category'
          schema:
            $ref: '#/definitions/InvoiceItemCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete an invoice item category'
      operationId: deleteInvoiceItemCategory
      description: 'Delete an invoice item category. Deleting an invoice item category is only possible if use_as_service and use_as_expense are both false. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an invoice item category'
        url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-item-categories/#delete-an-invoice-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: invoiceItemCategoryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an invoice item category'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/estimates/{estimateId}/messages':
    get:
      summary: 'List all messages for an estimate'
      operationId: listMessagesForEstimate
      description: "Returns a list of messages associated with a given estimate. The estimate messages are returned sorted by creation date, with the most recently created messages appearing first.\n\nThe response contains an object with an estimate_messages property that contains an array of up to per_page messages. Each entry in the array is a separate message object. If no more messages are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your messages."
      externalDocs:
        description: 'List all messages for an estimate'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-messages/#list-all-messages-for-an-estimate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateId
          required: true
          in: path
          type: string
        -
          name: updated_since
          description: 'Only return estimate messages that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all messages for an estimate'
          schema:
            $ref: '#/definitions/EstimateMessages'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Re-open a closed estimate'
      operationId: reOpenClosedEstimate
      description: 'Creates a new estimate message object and re-opens a closed estimate. Returns an estimate message object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Re-open a closed estimate'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-messages/#re-open-a-closed-estimate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              event_type:
                type: string
                description: 'Pass “re-open” to re-open the estimate.'
            required:
              - event_type
      responses:
        200:
          description: 'Re-open a closed estimate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/estimates/{estimateId}/messages/{messageId}':
    delete:
      summary: 'Delete an estimate message'
      operationId: deleteEstimateMessage
      description: 'Delete an estimate message. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an estimate message'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-messages/#delete-an-estimate-message'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateId
          required: true
          in: path
          type: string
        -
          name: messageId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an estimate message'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /estimates:
    get:
      summary: 'List all estimates'
      operationId: listEstimates
      description: "Returns a list of your estimates. The estimates are returned sorted by issue date, with the most recently issued estimates appearing first.\n\nThe response contains an object with a estimates property that contains an array of up to per_page estimates. Each entry in the array is a separate estimate object. If no more estimates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your estimates."
      externalDocs:
        description: 'List all estimates'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#list-all-estimates'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: client_id
          description: 'Only return estimates belonging to the client with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: updated_since
          description: 'Only return estimates that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: from
          description: 'Only return estimates with an issue_date on or after the given date.'
          required: false
          in: query
          type: string
        -
          name: to
          description: 'Only return estimates with an issue_date on or before the given date.'
          required: false
          in: query
          type: string
        -
          name: state
          description: 'Only return estimates with a state matching the value provided. Options: draft, sent, accepted, or declined.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all estimates'
          schema:
            $ref: '#/definitions/Estimates'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an estimate'
      operationId: createEstimate
      description: 'Creates a new estimate object. Returns an estimate object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an estimate'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#create-an-estimate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client this estimate belongs to.'
                format: int32
              number:
                type: string
                description: 'If no value is set, the number will be automatically generated.'
              purchase_order:
                type: string
                description: 'The purchase order number.'
              tax:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              tax2:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              discount:
                type: number
                description: 'This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%.'
                format: float
              subject:
                type: string
                description: 'The estimate subject.'
              notes:
                type: string
                description: 'Any additional notes to include on the estimate.'
              currency:
                type: string
                description: 'The currency used by the estimate. If not provided, the client’s currency will be used. See a list of supported currencies'
              issue_date:
                type: string
                description: 'Date the estimate was issued. Defaults to today’s date.'
                format: date
              line_items:
                type: array
                description: 'Array of line item parameters'
                items:
                  type: object
                  required:
                    - project_ids
                  properties:
                    project_ids:
                      description: 'An array of the client’s project IDs you’d like to include time/expenses from.'
                      type: array
                      items:
                        type: integer
                    time:
                      description: 'An time import object.'
                      type: object
                      required:
                        - summary_type
                      properties:
                        summary_type:
                          type: string
                          description: 'How to summarize the time entries per line item. Options: project, task, people, or detailed.'
                        from:
                          type: string
                          format: date
                          description: 'Start date for included time entries. Must be provided if to is present. If neither from or to are provided, all unbilled time entries will be included.'
                        to:
                          type: string
                          format: date
                          description: 'End date for included time entries. Must be provided if from is present. If neither from or to are provided, all unbilled time entries will be included.'
                    expenses:
                      description: 'An expense import object.'
                      type: object
                      required:
                        - summary_type
                      properties:
                        summary_type:
                          type: string
                          description: 'How to summarize the expenses per line item. Options: project, category, people, or detailed.'
                        from:
                          type: string
                          format: date
                          description: 'Start date for included expenses. Must be provided if to is present. If neither from or to are provided, all unbilled expenses will be included.'
                        to:
                          type: string
                          format: date
                          description: 'End date for included expenses. Must be provided if from is present. If neither from or to are provided, all unbilled expenses will be included.'
                        attach_receipt:
                          type: boolean
                          description: 'If set to true, a PDF containing an expense report with receipts will be attached to the invoice. Defaults to false.'
            required:
              - client_id
      responses:
        201:
          description: 'Create an estimate'
          schema:
            $ref: '#/definitions/Estimate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/estimates/{estimateId}':
    get:
      summary: 'Retrieve an estimate'
      operationId: retrieveEstimate
      description: 'Retrieves the estimate with the given ID. Returns an estimate object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve an estimate'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#retrieve-an-estimate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve an estimate'
          schema:
            $ref: '#/definitions/Estimate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update an estimate'
      operationId: updateEstimate
      description: 'Updates the specific estimate by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an estimate object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update an estimate'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#update-an-estimate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client this estimate belongs to.'
                format: int32
              number:
                type: string
                description: 'If no value is set, the number will be automatically generated.'
              purchase_order:
                type: string
                description: 'The purchase order number.'
              tax:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              tax2:
                type: number
                description: 'This percentage is applied to the subtotal, including line items and discounts. Example: use 10.0 for 10.0%.'
                format: float
              discount:
                type: number
                description: 'This percentage is subtracted from the subtotal. Example: use 10.0 for 10.0%.'
                format: float
              subject:
                type: string
                description: 'The estimate subject.'
              notes:
                type: string
                description: 'Any additional notes to include on the estimate.'
              currency:
                type: string
                description: 'The currency used by the estimate. If not provided, the client’s currency will be used. See a list of supported currencies'
              issue_date:
                type: string
                description: 'Date the estimate was issued.'
                format: date
              line_items:
                type: array
                description: 'Array of line item parameters'
                items:
                  type: object
                  required:
                    - project_ids
                  properties:
                    project_ids:
                      description: 'An array of the client’s project IDs you’d like to include time/expenses from.'
                      type: array
                      items:
                        type: integer
                    time:
                      description: 'An time import object.'
                      type: object
                      required:
                        - summary_type
                      properties:
                        summary_type:
                          type: string
                          description: 'How to summarize the time entries per line item. Options: project, task, people, or detailed.'
                        from:
                          type: string
                          format: date
                          description: 'Start date for included time entries. Must be provided if to is present. If neither from or to are provided, all unbilled time entries will be included.'
                        to:
                          type: string
                          format: date
                          description: 'End date for included time entries. Must be provided if from is present. If neither from or to are provided, all unbilled time entries will be included.'
                    expenses:
                      description: 'An expense import object.'
                      type: object
                      required:
                        - summary_type
                      properties:
                        summary_type:
                          type: string
                          description: 'How to summarize the expenses per line item. Options: project, category, people, or detailed.'
                        from:
                          type: string
                          format: date
                          description: 'Start date for included expenses. Must be provided if to is present. If neither from or to are provided, all unbilled expenses will be included.'
                        to:
                          type: string
                          format: date
                          description: 'End date for included expenses. Must be provided if from is present. If neither from or to are provided, all unbilled expenses will be included.'
                        attach_receipt:
                          type: boolean
                          description: 'If set to true, a PDF containing an expense report with receipts will be attached to the invoice. Defaults to false.'
      responses:
        200:
          description: 'Update an estimate'
          schema:
            $ref: '#/definitions/Estimate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete an estimate'
      operationId: deleteEstimate
      description: 'Delete an estimate. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an estimate'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#delete-an-estimate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an estimate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /estimate_item_categories:
    get:
      summary: 'List all estimate item categories'
      operationId: listEstimateItemCategories
      description: "Returns a list of your estimate item categories. The estimate item categories are returned sorted by creation date, with the most recently created estimate item categories appearing first.\n\nThe response contains an object with a estimate_item_categories property that contains an array of up to per_page estimate item categories. Each entry in the array is a separate estimate item category object. If no more estimate item categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your estimate item categories."
      externalDocs:
        description: 'List all estimate item categories'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-item-categories/#list-all-estimate-item-categories'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: updated_since
          description: 'Only return estimate item categories that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all estimate item categories'
          schema:
            $ref: '#/definitions/EstimateItemCategories'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an estimate item category'
      operationId: createEstimateItemCategory
      description: 'Creates a new estimate item category object. Returns an estimate item category object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an estimate item category'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-item-categories/#create-an-estimate-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the estimate item category.'
            required:
              - name
      responses:
        201:
          description: 'Create an estimate item category'
          schema:
            $ref: '#/definitions/EstimateItemCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/estimate_item_categories/{estimateItemCategoryId}':
    get:
      summary: 'Retrieve an estimate item category'
      operationId: retrieveEstimateItemCategory
      description: 'Retrieves the estimate item category with the given ID. Returns an estimate item category object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve an estimate item category'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-item-categories/#retrieve-an-estimate-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateItemCategoryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve an estimate item category'
          schema:
            $ref: '#/definitions/EstimateItemCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update an estimate item category'
      operationId: updateEstimateItemCategory
      description: 'Updates the specific estimate item category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an estimate item category object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update an estimate item category'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-item-categories/#update-an-estimate-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateItemCategoryId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the estimate item category.'
      responses:
        200:
          description: 'Update an estimate item category'
          schema:
            $ref: '#/definitions/EstimateItemCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete an estimate item category'
      operationId: deleteEstimateItemCategory
      description: 'Delete an estimate item category. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an estimate item category'
        url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-item-categories/#delete-an-estimate-item-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: estimateItemCategoryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an estimate item category'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /expenses:
    get:
      summary: 'List all expenses'
      operationId: listExpenses
      description: "Returns a list of your expenses. If accessing this endpoint as an Admin, all expenses in the account will be returned. The expenses are returned sorted by the spent_at date, with the most recent expenses appearing first.\n\nThe response contains an object with a expenses property that contains an array of up to per_page expenses. Each entry in the array is a separate expense object. If no more expenses are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your expenses."
      externalDocs:
        description: 'List all expenses'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expenses/#list-all-expenses'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: user_id
          description: 'Only return expenses belonging to the user with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: client_id
          description: 'Only return expenses belonging to the client with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: project_id
          description: 'Only return expenses belonging to the project with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: is_billed
          description: 'Pass true to only return expenses that have been invoiced and false to return expenses that have not been invoiced.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return expenses that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: from
          description: 'Only return expenses with a spent_date on or after the given date.'
          required: false
          in: query
          type: string
        -
          name: to
          description: 'Only return expenses with a spent_date on or before the given date.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all expenses'
          schema:
            $ref: '#/definitions/Expenses'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an expense'
      operationId: createExpense
      description: 'Creates a new expense object. Returns an expense object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an expense'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expenses/#create-an-expense'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: 'The ID of the user associated with this expense.  Defaults to the ID of the currently authenticated user.'
                format: int32
              project_id:
                type: integer
                description: 'The ID of the project associated with this expense.'
                format: int32
              expense_category_id:
                type: integer
                description: 'The ID of the expense category this expense is being tracked against.'
                format: int32
              spent_date:
                type: string
                description: 'Date the expense occurred.'
                format: date
              units:
                type: integer
                description: 'The quantity of units to use in calculating the total_cost of the expense.'
                format: int32
              total_cost:
                type: number
                description: 'The total amount of the expense.'
                format: float
              notes:
                type: string
                description: 'Textual notes used to describe the expense.'
              billable:
                type: boolean
                description: 'Whether this expense is billable or not. Defaults to true.'
              receipt:
                type: string
                description: 'A receipt file to attach to the expense. If including a receipt, you must submit a multipart/form-data request.'
            required:
              - project_id
              - expense_category_id
              - spent_date
      responses:
        201:
          description: 'Create an expense'
          schema:
            $ref: '#/definitions/Expense'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/expenses/{expenseId}':
    get:
      summary: 'Retrieve an expense'
      operationId: retrieveExpense
      description: 'Retrieves the expense with the given ID. Returns an expense object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve an expense'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expenses/#retrieve-an-expense'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: expenseId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve an expense'
          schema:
            $ref: '#/definitions/Expense'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update an expense'
      operationId: updateExpense
      description: 'Updates the specific expense by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update an expense'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expenses/#update-an-expense'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: expenseId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              project_id:
                type: integer
                description: 'The ID of the project associated with this expense.'
                format: int32
              expense_category_id:
                type: integer
                description: 'The ID of the expense category this expense is being tracked against.'
                format: int32
              spent_date:
                type: string
                description: 'Date the expense occurred.'
                format: date
              units:
                type: integer
                description: 'The quantity of units to use in calculating the total_cost of the expense.'
                format: int32
              total_cost:
                type: number
                description: 'The total amount of the expense.'
                format: float
              notes:
                type: string
                description: 'Textual notes used to describe the expense.'
              billable:
                type: boolean
                description: 'Whether this expense is billable or not. Defaults to true.'
              receipt:
                type: string
                description: 'A receipt file to attach to the expense. If including a receipt, you must submit a multipart/form-data request.'
              delete_receipt:
                type: boolean
                description: 'Whether an attached expense receipt should be deleted. Pass true to delete the expense receipt.'
      responses:
        200:
          description: 'Update an expense'
          schema:
            $ref: '#/definitions/Expense'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete an expense'
      operationId: deleteExpense
      description: 'Delete an expense. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an expense'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expenses/#delete-an-expense'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: expenseId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an expense'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /expense_categories:
    get:
      summary: 'List all expense categories'
      operationId: listExpenseCategories
      description: "Returns a list of your expense categories. The expense categories are returned sorted by creation date, with the most recently created expense categories appearing first.\n\nThe response contains an object with a expense_categories property that contains an array of up to per_page expense categories. Each entry in the array is a separate expense category object. If no more expense categories are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your expense categories."
      externalDocs:
        description: 'List all expense categories'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expense-categories/#list-all-expense-categories'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: is_active
          description: 'Pass true to only return active expense categories and false to return inactive expense categories.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return expense categories that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all expense categories'
          schema:
            $ref: '#/definitions/ExpenseCategories'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create an expense category'
      operationId: createExpenseCategory
      description: 'Creates a new expense category object. Returns an expense category object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create an expense category'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expense-categories/#create-an-expense-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the expense category.'
              unit_name:
                type: string
                description: 'The unit name of the expense category.'
              unit_price:
                type: number
                description: 'The unit price of the expense category.'
                format: float
              is_active:
                type: boolean
                description: 'Whether the expense category is active or archived. Defaults to true.'
            required:
              - name
      responses:
        201:
          description: 'Create an expense category'
          schema:
            $ref: '#/definitions/ExpenseCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/expense_categories/{expenseCategoryId}':
    get:
      summary: 'Retrieve an expense category'
      operationId: retrieveExpenseCategory
      description: 'Retrieves the expense category with the given ID. Returns an expense category object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve an expense category'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expense-categories/#retrieve-an-expense-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: expenseCategoryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve an expense category'
          schema:
            $ref: '#/definitions/ExpenseCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update an expense category'
      operationId: updateExpenseCategory
      description: 'Updates the specific expense category by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns an expense category object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update an expense category'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expense-categories/#update-an-expense-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: expenseCategoryId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the expense category.'
              unit_name:
                type: string
                description: 'The unit name of the expense category.'
              unit_price:
                type: number
                description: 'The unit price of the expense category.'
                format: float
              is_active:
                type: boolean
                description: 'Whether the expense category is active or archived.'
      responses:
        200:
          description: 'Update an expense category'
          schema:
            $ref: '#/definitions/ExpenseCategory'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete an expense category'
      operationId: deleteExpenseCategory
      description: 'Delete an expense category. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete an expense category'
        url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expense-categories/#delete-an-expense-category'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: expenseCategoryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete an expense category'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /tasks:
    get:
      summary: 'List all tasks'
      operationId: listTasks
      description: "Returns a list of your tasks. The tasks are returned sorted by creation date, with the most recently created tasks appearing first.\n\nThe response contains an object with a tasks property that contains an array of up to per_page tasks. Each entry in the array is a separate task object. If no more tasks are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your tasks."
      externalDocs:
        description: 'List all tasks'
        url: 'https://help.getharvest.com/api-v2/tasks-api/tasks/tasks/#list-all-tasks'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: is_active
          description: 'Pass true to only return active tasks and false to return inactive tasks.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return tasks that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all tasks'
          schema:
            $ref: '#/definitions/Tasks'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a task'
      operationId: createTask
      description: 'Creates a new task object. Returns a task object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a task'
        url: 'https://help.getharvest.com/api-v2/tasks-api/tasks/tasks/#create-a-task'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the task.'
              billable_by_default:
                type: boolean
                description: 'Used in determining whether default tasks should be marked billable when creating a new project. Defaults to true.'
              default_hourly_rate:
                type: number
                description: 'The default hourly rate to use for this task when it is added to a project. Defaults to 0.'
                format: float
              is_default:
                type: boolean
                description: 'Whether this task should be automatically added to future projects. Defaults to false.'
              is_active:
                type: boolean
                description: 'Whether this task is active or archived. Defaults to true.'
            required:
              - name
      responses:
        201:
          description: 'Create a task'
          schema:
            $ref: '#/definitions/Task'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/tasks/{taskId}':
    get:
      summary: 'Retrieve a task'
      operationId: retrieveTask
      description: 'Retrieves the task with the given ID. Returns a task object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a task'
        url: 'https://help.getharvest.com/api-v2/tasks-api/tasks/tasks/#retrieve-a-task'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: taskId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a task'
          schema:
            $ref: '#/definitions/Task'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a task'
      operationId: updateTask
      description: 'Updates the specific task by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a task object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a task'
        url: 'https://help.getharvest.com/api-v2/tasks-api/tasks/tasks/#update-a-task'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: taskId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The name of the task.'
              billable_by_default:
                type: boolean
                description: 'Used in determining whether default tasks should be marked billable when creating a new project.'
              default_hourly_rate:
                type: number
                description: 'The default hourly rate to use for this task when it is added to a project.'
                format: float
              is_default:
                type: boolean
                description: 'Whether this task should be automatically added to future projects.'
              is_active:
                type: boolean
                description: 'Whether this task is active or archived.'
      responses:
        200:
          description: 'Update a task'
          schema:
            $ref: '#/definitions/Task'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a task'
      operationId: deleteTask
      description: 'Delete a task. Deleting a task is only possible if it has no time entries associated with it. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a task'
        url: 'https://help.getharvest.com/api-v2/tasks-api/tasks/tasks/#delete-a-task'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: taskId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a task'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /time_entries:
    get:
      summary: 'List all time entries'
      operationId: listTimeEntries
      description: "Returns a list of your time entries. The time entries are returned sorted by spent_at date. At this time, the sort option can’t be customized.\n\nThe response contains an object with a time_entries property that contains an array of up to per_page time entries. Each entry in the array is a separate time entry object. If no more time entries are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your time entries."
      externalDocs:
        description: 'List all time entries'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#list-all-time-entries'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: user_id
          description: 'Only return time entries belonging to the user with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: client_id
          description: 'Only return time entries belonging to the client with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: project_id
          description: 'Only return time entries belonging to the project with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: is_billed
          description: 'Pass true to only return time entries that have been invoiced and false to return time entries that have not been invoiced.'
          required: false
          in: query
          type: boolean
        -
          name: is_running
          description: 'Pass true to only return running time entries and false to return non-running time entries.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return time entries that have been updated since the given date and time. Use the ISO 8601 Format.'
          required: false
          in: query
          type: string
        -
          name: from
          description: 'Only return time entries with a spent_date on or after the given date.'
          required: false
          in: query
          type: string
        -
          name: to
          description: 'Only return time entries with a spent_date on or before the given date.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all time entries'
          schema:
            $ref: '#/definitions/TimeEntries'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a time entry via start and end time'
      operationId: createTimeEntryViaStartAndEndTime
      description: "Creates a new time entry object. Returns a time entry object and a 201 Created response code if the call succeeded.\n\nYou should only use this method to create time entries when your account is configured to track time via start and end time. You can verify this by visiting the Settings page in your Harvest account or by checking if wants_timestamp_timers is true in the Company API."
      externalDocs:
        description: 'Create a time entry via start and end time'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#create-a-time-entry-via-start-and-end-time'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: 'The ID of the user to associate with the time entry. Defaults to the currently authenticated user’s ID.'
                format: int32
              project_id:
                type: integer
                description: 'The ID of the project to associate with the time entry.'
                format: int32
              task_id:
                type: integer
                description: 'The ID of the task to associate with the time entry.'
                format: int32
              spent_date:
                type: string
                description: 'The ISO 8601 formatted date the time entry was spent.'
                format: date
              started_time:
                type: string
                description: 'The time the entry started. Defaults to the current time. Example: “8:00am”.'
              ended_time:
                type: string
                description: 'The time the entry ended. If provided, is_running will be set to false. If not provided, is_running will be set to true.'
              notes:
                type: string
                description: 'Any notes to be associated with the time entry.'
              external_reference:
                type: object
                description: 'An object containing the id, group_id, and permalink of the external reference.'
                properties:
                  id:
                    type: string
                  group_id:
                    type: string
                  permalink:
                    type: string
            required:
              - project_id
              - task_id
              - spent_date
      responses:
        201:
          description: 'Create a time entry via start and end time'
          schema:
            $ref: '#/definitions/TimeEntry'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/time_entries/{timeEntryId}':
    get:
      summary: 'Retrieve a time entry'
      operationId: retrieveTimeEntry
      description: 'Retrieves the time entry with the given ID. Returns a time entry object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a time entry'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#retrieve-a-time-entry'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: timeEntryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a time entry'
          schema:
            $ref: '#/definitions/TimeEntry'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a time entry'
      operationId: updateTimeEntry
      description: 'Updates the specific time entry by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a time entry object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a time entry'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#update-a-time-entry'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: timeEntryId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              project_id:
                type: integer
                description: 'The ID of the project to associate with the time entry.'
                format: int32
              task_id:
                type: integer
                description: 'The ID of the task to associate with the time entry.'
                format: int32
              spent_date:
                type: string
                description: 'The ISO 8601 formatted date the time entry was spent.'
                format: date
              started_time:
                type: string
                description: 'The time the entry started. Defaults to the current time. Example: “8:00am”.'
              ended_time:
                type: string
                description: 'The time the entry ended.'
              hours:
                type: number
                description: 'The current amount of time tracked.'
                format: float
              notes:
                type: string
                description: 'Any notes to be associated with the time entry.'
              external_reference:
                type: object
                description: 'An object containing the id, group_id, and permalink of the external reference.'
                properties:
                  id:
                    type: string
                  group_id:
                    type: string
                  permalink:
                    type: string
      responses:
        200:
          description: 'Update a time entry'
          schema:
            $ref: '#/definitions/TimeEntry'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a time entry'
      operationId: deleteTimeEntry
      description: 'Delete a time entry. Deleting a time entry is only possible if it’s not closed and the associated project and task haven’t been archived.  However, Admins can delete closed entries. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a time entry'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#delete-a-time-entry'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: timeEntryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a time entry'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/time_entries/{timeEntryId}/external_reference':
    delete:
      summary: 'Delete a time entry’s external reference'
      operationId: deleteTimeEntryExternalReference
      description: 'Delete a time entry’s external reference. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a time entry’s external reference'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#delete-a-time-entrys-external-reference'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: timeEntryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a time entry’s external reference'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/time_entries/{timeEntryId}/restart':
    patch:
      summary: 'Restart a stopped time entry'
      operationId: restartStoppedTimeEntry
      description: 'Restarting a time entry is only possible if it isn’t currently running. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Restart a stopped time entry'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#restart-a-stopped-time-entry'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: timeEntryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Restart a stopped time entry'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/time_entries/{timeEntryId}/stop':
    patch:
      summary: 'Stop a running time entry'
      operationId: stopRunningTimeEntry
      description: 'Stopping a time entry is only possible if it’s currently running. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Stop a running time entry'
        url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#stop-a-running-time-entry'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: timeEntryId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Stop a running time entry'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /user_assignments:
    get:
      summary: 'List all user assignments'
      operationId: listUserAssignments
      description: "Returns a list of your projects user assignments, active and archived. The user assignments are returned sorted by creation date, with the most recently created user assignments appearing first.\n\nThe response contains an object with a user_assignments property that contains an array of up to per_page user assignments. Each entry in the array is a separate user assignment object. If no more user assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your user assignments."
      externalDocs:
        description: 'List all user assignments'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#list-all-user-assignments'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: user_id
          description: 'Only return user assignments belonging to the user with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: is_active
          description: 'Pass true to only return active user assignments and false to return inactive user assignments.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return user assignments that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all user assignments'
          schema:
            $ref: '#/definitions/UserAssignments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/projects/{projectId}/user_assignments':
    get:
      summary: 'List all user assignments for a specific project'
      operationId: listUserAssignmentsForSpecificProject
      description: "Returns a list of user assignments for the project identified by PROJECT_ID. The user assignments are returned sorted by creation date, with the most recently created user assignments appearing first.\n\nThe response contains an object with a user_assignments property that contains an array of up to per_page user assignments. Each entry in the array is a separate user assignment object. If no more user assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your user assignments."
      externalDocs:
        description: 'List all user assignments for a specific project'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#list-all-user-assignments-for-a-specific-project'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: user_id
          description: 'Only return user assignments belonging to the user with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: is_active
          description: 'Pass true to only return active user assignments and false to return inactive user assignments.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return user assignments that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all user assignments for a specific project'
          schema:
            $ref: '#/definitions/UserAssignments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a user assignment'
      operationId: createUserAssignment
      description: 'Creates a new user assignment object. Returns a user assignment object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a user assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#create-a-user-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              user_id:
                type: integer
                description: 'The ID of the user to associate with the project.'
                format: int32
              is_active:
                type: boolean
                description: 'Whether the user assignment is active or archived. Defaults to true.'
              is_project_manager:
                type: boolean
                description: 'Determines if the user has Project Manager permissions for the project. Defaults to false for users with Regular User permissions and true for those with Project Managers or Administrator permissions.'
              use_default_rates:
                type: boolean
                description: 'Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment. Defaults to true.'
              hourly_rate:
                type: number
                description: 'Custom rate used when the project’s bill_by is People and use_default_rates is false. Defaults to 0.'
                format: float
              budget:
                type: number
                description: 'Budget used when the project’s budget_by is person.'
                format: float
            required:
              - user_id
      responses:
        201:
          description: 'Create a user assignment'
          schema:
            $ref: '#/definitions/UserAssignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/projects/{projectId}/user_assignments/{userAssignmentId}':
    get:
      summary: 'Retrieve a user assignment'
      operationId: retrieveUserAssignment
      description: 'Retrieves the user assignment with the given ID. Returns a user assignment object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a user assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#retrieve-a-user-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: userAssignmentId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a user assignment'
          schema:
            $ref: '#/definitions/UserAssignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a user assignment'
      operationId: updateUserAssignment
      description: 'Updates the specific user assignment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a user assignment object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a user assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#update-a-user-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: userAssignmentId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              is_active:
                type: boolean
                description: 'Whether the user assignment is active or archived.'
              is_project_manager:
                type: boolean
                description: 'Determines if the user has Project Manager permissions for the project.'
              use_default_rates:
                type: boolean
                description: 'Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment.'
              hourly_rate:
                type: number
                description: 'Custom rate used when the project’s bill_by is People and use_default_rates is false.'
                format: float
              budget:
                type: number
                description: 'Budget used when the project’s budget_by is person.'
                format: float
      responses:
        200:
          description: 'Update a user assignment'
          schema:
            $ref: '#/definitions/UserAssignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a user assignment'
      operationId: deleteUserAssignment
      description: 'Delete a user assignment. Deleting a user assignment is only possible if it has no time entries or expenses associated with it. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a user assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#delete-a-user-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: userAssignmentId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a user assignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /task_assignments:
    get:
      summary: 'List all task assignments'
      operationId: listTaskAssignments
      description: "Returns a list of your task assignments. The task assignments are returned sorted by creation date, with the most recently created task assignments appearing first.\n\nThe response contains an object with a task_assignments property that contains an array of up to per_page task assignments. Each entry in the array is a separate task assignment object. If no more task assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your task assignments."
      externalDocs:
        description: 'List all task assignments'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#list-all-task-assignments'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: is_active
          description: 'Pass true to only return active task assignments and false to return inactive task assignments.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return task assignments that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all task assignments'
          schema:
            $ref: '#/definitions/TaskAssignments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/projects/{projectId}/task_assignments':
    get:
      summary: 'List all task assignments for a specific project'
      operationId: listTaskAssignmentsForSpecificProject
      description: "Returns a list of your task assignments for the project identified by PROJECT_ID. The task assignments are returned sorted by creation date, with the most recently created task assignments appearing first.\n\nThe response contains an object with a task_assignments property that contains an array of up to per_page task assignments. Each entry in the array is a separate task assignment object. If no more task assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your task assignments."
      externalDocs:
        description: 'List all task assignments for a specific project'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#list-all-task-assignments-for-a-specific-project'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: is_active
          description: 'Pass true to only return active task assignments and false to return inactive task assignments.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return task assignments that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all task assignments for a specific project'
          schema:
            $ref: '#/definitions/TaskAssignments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a task assignment'
      operationId: createTaskAssignment
      description: 'Creates a new task assignment object. Returns a task assignment object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a task assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#create-a-task-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              task_id:
                type: integer
                description: 'The ID of the task to associate with the project.'
                format: int32
              is_active:
                type: boolean
                description: 'Whether the task assignment is active or archived. Defaults to true.'
              billable:
                type: boolean
                description: 'Whether the task assignment is billable or not. Defaults to false.'
              hourly_rate:
                type: number
                description: 'Rate used when the project’s bill_by is Tasks. Defaults to null when billing by task hourly rate, otherwise 0.'
                format: float
              budget:
                type: number
                description: 'Budget used when the project’s budget_by is task or task_fees.'
                format: float
            required:
              - task_id
      responses:
        201:
          description: 'Create a task assignment'
          schema:
            $ref: '#/definitions/TaskAssignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/projects/{projectId}/task_assignments/{taskAssignmentId}':
    get:
      summary: 'Retrieve a task assignment'
      operationId: retrieveTaskAssignment
      description: 'Retrieves the task assignment with the given ID. Returns a task assignment object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a task assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#retrieve-a-task-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: taskAssignmentId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a task assignment'
          schema:
            $ref: '#/definitions/TaskAssignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a task assignment'
      operationId: updateTaskAssignment
      description: 'Updates the specific task assignment by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a task assignment object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a task assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#update-a-task-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: taskAssignmentId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              is_active:
                type: boolean
                description: 'Whether the task assignment is active or archived.'
              billable:
                type: boolean
                description: 'Whether the task assignment is billable or not.'
              hourly_rate:
                type: number
                description: 'Rate used when the project’s bill_by is Tasks.'
                format: float
              budget:
                type: number
                description: 'Budget used when the project’s budget_by is task or task_fees.'
                format: float
      responses:
        200:
          description: 'Update a task assignment'
          schema:
            $ref: '#/definitions/TaskAssignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a task assignment'
      operationId: deleteTaskAssignment
      description: 'Delete a task assignment. Deleting a task assignment is only possible if it has no time entries associated with it. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a task assignment'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#delete-a-task-assignment'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: taskAssignmentId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a task assignment'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /projects:
    get:
      summary: 'List all projects'
      operationId: listProjects
      description: "Returns a list of your projects. The projects are returned sorted by creation date, with the most recently created projects appearing first.\n\nThe response contains an object with a projects property that contains an array of up to per_page projects. Each entry in the array is a separate project object. If no more projects are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your projects."
      externalDocs:
        description: 'List all projects'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/projects/#list-all-projects'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: is_active
          description: 'Pass true to only return active projects and false to return inactive projects.'
          required: false
          in: query
          type: boolean
        -
          name: client_id
          description: 'Only return projects belonging to the client with the given ID.'
          required: false
          in: query
          type: integer
        -
          name: updated_since
          description: 'Only return projects that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all projects'
          schema:
            $ref: '#/definitions/Projects'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a project'
      operationId: createProject
      description: 'Creates a new project object. Returns a project object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a project'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/projects/#create-a-project'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client to associate this project with.'
                format: int32
              name:
                type: string
                description: 'The name of the project.'
              code:
                type: string
                description: 'The code associated with the project.'
              is_active:
                type: boolean
                description: 'Whether the project is active or archived. Defaults to true.'
              is_billable:
                type: boolean
                description: 'Whether the project is billable or not.'
              is_fixed_fee:
                type: boolean
                description: 'Whether the project is a fixed-fee project or not.'
              bill_by:
                type: string
                description: 'The method by which the project is invoiced. Options: Project, Tasks, People, or none.'
              hourly_rate:
                type: number
                description: 'Rate for projects billed by Project Hourly Rate.'
                format: float
              budget:
                type: number
                description: 'The budget in hours for the project when budgeting by time.'
                format: float
              budget_by:
                type: string
                description: 'The method by which the project is budgeted. Options: project (Hours Per Project), project_cost (Total Project Fees), task (Hours Per Task), task_fees (Fees Per Task), person (Hours Per Person), none (No Budget).'
              budget_is_monthly:
                type: boolean
                description: 'Option to have the budget reset every month. Defaults to false.'
              notify_when_over_budget:
                type: boolean
                description: 'Whether Project Managers should be notified when the project goes over budget. Defaults to false.'
              over_budget_notification_percentage:
                type: number
                description: 'Percentage value used to trigger over budget email alerts. Example: use 10.0 for 10.0%.'
                format: float
              show_budget_to_all:
                type: boolean
                description: 'Option to show project budget to all employees. Does not apply to Total Project Fee projects. Defaults to false.'
              cost_budget:
                type: number
                description: 'The monetary budget for the project when budgeting by money.'
                format: float
              cost_budget_include_expenses:
                type: boolean
                description: 'Option for budget of Total Project Fees projects to include tracked expenses. Defaults to false.'
              fee:
                type: number
                description: 'The amount you plan to invoice for the project. Only used by fixed-fee projects.'
                format: float
              notes:
                type: string
                description: 'Project notes.'
              starts_on:
                type: string
                description: 'Date the project was started.'
                format: date
              ends_on:
                type: string
                description: 'Date the project will end.'
                format: date
            required:
              - client_id
              - name
              - is_billable
              - bill_by
              - budget_by
      responses:
        201:
          description: 'Create a project'
          schema:
            $ref: '#/definitions/Project'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/projects/{projectId}':
    get:
      summary: 'Retrieve a project'
      operationId: retrieveProject
      description: 'Retrieves the project with the given ID. Returns a project object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a project'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/projects/#retrieve-a-project'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a project'
          schema:
            $ref: '#/definitions/Project'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a project'
      operationId: updateProject
      description: 'Updates the specific project by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a project object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a project'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/projects/#update-a-project'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              client_id:
                type: integer
                description: 'The ID of the client to associate this project with.'
                format: int32
              name:
                type: string
                description: 'The name of the project.'
              code:
                type: string
                description: 'The code associated with the project.'
              is_active:
                type: boolean
                description: 'Whether the project is active or archived. Defaults to true.'
              is_billable:
                type: boolean
                description: 'Whether the project is billable or not.'
              is_fixed_fee:
                type: boolean
                description: 'Whether the project is a fixed-fee project or not.'
              bill_by:
                type: string
                description: 'The method by which the project is invoiced. Options: Project, Tasks, People, or none.'
              hourly_rate:
                type: number
                description: 'Rate for projects billed by Project Hourly Rate.'
                format: float
              budget:
                type: number
                description: 'The budget in hours for the project when budgeting by time.'
                format: float
              budget_by:
                type: string
                description: 'The method by which the project is budgeted. Options: project (Hours Per Project), project_cost (Total Project Fees), task (Hours Per Task), task_fees (Fees Per Task), person (Hours Per Person), none (No Budget).'
              budget_is_monthly:
                type: boolean
                description: 'Option to have the budget reset every month. Defaults to false.'
              notify_when_over_budget:
                type: boolean
                description: 'Whether Project Managers should be notified when the project goes over budget. Defaults to false.'
              over_budget_notification_percentage:
                type: number
                description: 'Percentage value used to trigger over budget email alerts. Example: use 10.0 for 10.0%.'
                format: float
              show_budget_to_all:
                type: boolean
                description: 'Option to show project budget to all employees. Does not apply to Total Project Fee projects. Defaults to false.'
              cost_budget:
                type: number
                description: 'The monetary budget for the project when budgeting by money.'
                format: float
              cost_budget_include_expenses:
                type: boolean
                description: 'Option for budget of Total Project Fees projects to include tracked expenses. Defaults to false.'
              fee:
                type: number
                description: 'The amount you plan to invoice for the project. Only used by fixed-fee projects.'
                format: float
              notes:
                type: string
                description: 'Project notes.'
              starts_on:
                type: string
                description: 'Date the project was started.'
                format: date
              ends_on:
                type: string
                description: 'Date the project will end.'
                format: date
      responses:
        200:
          description: 'Update a project'
          schema:
            $ref: '#/definitions/Project'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a project'
      operationId: deleteProject
      description: "Deletes a project and any time entries or expenses tracked to it.\nHowever, invoices associated with the project will not be deleted.\nIf you don’t want the project’s time entries and expenses to be deleted, you should archive the project instead."
      externalDocs:
        description: 'Delete a project'
        url: 'https://help.getharvest.com/api-v2/projects-api/projects/projects/#delete-a-project'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: projectId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a project'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /roles:
    get:
      summary: 'List all roles'
      operationId: listRoles
      description: "Returns a list of roles in the account. The roles are returned sorted by creation date, with the most recently created roles appearing first.\n\nThe response contains an object with a roles property that contains an array of up to per_page roles. Each entry in the array is a separate role object. If no more roles are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your roles."
      externalDocs:
        description: 'List all roles'
        url: 'https://help.getharvest.com/api-v2/roles-api/roles/roles/#list-all-roles'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all roles'
          schema:
            $ref: '#/definitions/Roles'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a role'
      operationId: createRole
      description: 'Creates a new role object. Returns a role object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a role'
        url: 'https://help.getharvest.com/api-v2/roles-api/roles/roles/#create-a-role'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The  name of the role.'
              user_ids:
                type: array
                description: 'The IDs of the users assigned to this role.'
                items:
                  type: integer
            required:
              - name
      responses:
        201:
          description: 'Create a role'
          schema:
            $ref: '#/definitions/Role'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/roles/{roleId}':
    get:
      summary: 'Retrieve a role'
      operationId: retrieveRole
      description: 'Retrieves the role with the given ID. Returns a role object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a role'
        url: 'https://help.getharvest.com/api-v2/roles-api/roles/roles/#retrieve-a-role'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: roleId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a role'
          schema:
            $ref: '#/definitions/Role'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a role'
      operationId: updateRole
      description: 'Updates the specific role by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a role object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a role'
        url: 'https://help.getharvest.com/api-v2/roles-api/roles/roles/#update-a-role'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: roleId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              name:
                type: string
                description: 'The  name of the role.'
              user_ids:
                type: array
                description: 'The IDs of the users assigned to this role.'
                items:
                  type: integer
            required:
              - name
      responses:
        200:
          description: 'Update a role'
          schema:
            $ref: '#/definitions/Role'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a role'
      operationId: deleteRole
      description: 'Delete a role. Deleting a role will unlink it from any users it was assigned to. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a role'
        url: 'https://help.getharvest.com/api-v2/roles-api/roles/roles/#delete-a-role'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: roleId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a role'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}/billable_rates':
    get:
      summary: 'List all billable rates for a specific user'
      operationId: listBillableRatesForSpecificUser
      description: "Returns a list of billable rates for the user identified by USER_ID. The billable rates are returned sorted by start_date, with the oldest starting billable rates appearing first.\n\nThe response contains an object with a billable_rates property that contains an array of up to per_page billable rates. Each entry in the array is a separate billable rate object. If no more billable rates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your billable rates."
      externalDocs:
        description: 'List all billable rates for a specific user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/billable-rates/#list-all-billable-rates-for-a-specific-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all billable rates for a specific user'
          schema:
            $ref: '#/definitions/BillableRates'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a billable rate'
      operationId: createBillableRate
      description: "Creates a new billable rate object. Returns a billable rate object and a 201 Created response code if the call succeeded.\n\n\n  Creating a billable rate with no start_date will replace a user’s existing rate(s).\n  Creating a billable rate with a start_date that is before a user’s existing rate(s) will replace those billable rates with the new one.\n"
      externalDocs:
        description: 'Create a billable rate'
        url: 'https://help.getharvest.com/api-v2/users-api/users/billable-rates/#create-a-billable-rate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              amount:
                type: number
                description: 'The amount of the billable rate.'
                format: float
              start_date:
                type: string
                description: 'The date the billable rate is effective. Cannot be a date in the future.'
                format: date
            required:
              - amount
      responses:
        201:
          description: 'Create a billable rate'
          schema:
            $ref: '#/definitions/BillableRate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}/billable_rates/{billableRateId}':
    get:
      summary: 'Retrieve a billable rate'
      operationId: retrieveBillableRate
      description: 'Retrieves the billable rate with the given ID. Returns a billable rate object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a billable rate'
        url: 'https://help.getharvest.com/api-v2/users-api/users/billable-rates/#retrieve-a-billable-rate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: billableRateId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a billable rate'
          schema:
            $ref: '#/definitions/BillableRate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}/cost_rates':
    get:
      summary: 'List all cost rates for a specific user'
      operationId: listCostRatesForSpecificUser
      description: "Returns a list of cost rates for the user identified by USER_ID. The cost rates are returned sorted by start_date, with the oldest starting cost rates appearing first.\n\nThe response contains an object with a cost_rates property that contains an array of up to per_page cost rates. Each entry in the array is a separate cost rate object. If no more cost rates are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your cost rates."
      externalDocs:
        description: 'List all cost rates for a specific user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/cost-rates/#list-all-cost-rates-for-a-specific-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all cost rates for a specific user'
          schema:
            $ref: '#/definitions/CostRates'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a cost rate'
      operationId: createCostRate
      description: "Creates a new cost rate object. Returns a cost rate object and a 201 Created response code if the call succeeded.\n\n\n  Creating a cost rate with no start_date will replace a user’s existing rate(s).\n  Creating a cost rate with a start_date that is before a user’s existing rate(s) will replace those cost rates with the new one.\n"
      externalDocs:
        description: 'Create a cost rate'
        url: 'https://help.getharvest.com/api-v2/users-api/users/cost-rates/#create-a-cost-rate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              amount:
                type: number
                description: 'The amount of the cost rate.'
                format: float
              start_date:
                type: string
                description: 'The date the cost rate is effective. Cannot be a date in the future.'
                format: date
            required:
              - amount
      responses:
        201:
          description: 'Create a cost rate'
          schema:
            $ref: '#/definitions/CostRate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}/cost_rates/{costRateId}':
    get:
      summary: 'Retrieve a cost rate'
      operationId: retrieveCostRate
      description: 'Retrieves the cost rate with the given ID. Returns a cost rate object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a cost rate'
        url: 'https://help.getharvest.com/api-v2/users-api/users/cost-rates/#retrieve-a-cost-rate'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: costRateId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a cost rate'
          schema:
            $ref: '#/definitions/CostRate'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}/project_assignments':
    get:
      summary: 'List active project assignments'
      operationId: listActiveProjectAssignments
      description: "Returns a list of active project assignments for the user identified by USER_ID. The project assignments are returned sorted by creation date, with the most recently created project assignments appearing first.\n\nThe response contains an object with a project_assignments property that contains an array of up to per_page project assignments. Each entry in the array is a separate project assignment object. If no more project assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your project assignments."
      externalDocs:
        description: 'List active project assignments'
        url: 'https://help.getharvest.com/api-v2/users-api/users/project-assignments/#list-active-project-assignments'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: updated_since
          description: 'Only return project assignments that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List active project assignments'
          schema:
            $ref: '#/definitions/ProjectAssignments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /users/me/project_assignments:
    get:
      summary: 'List active project assignments for the currently authenticated user'
      operationId: listActiveProjectAssignmentsForTheCurrentlyAuthenticatedUser
      description: "Returns a list of your active project assignments for the currently authenticated user. The project assignments are returned sorted by creation date, with the most recently created project assignments appearing first.\n\nThe response contains an object with a project_assignments property that contains an array of up to per_page project assignments. Each entry in the array is a separate project assignment object. If no more project assignments are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your project assignments."
      externalDocs:
        description: 'List active project assignments for the currently authenticated user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/project-assignments/#list-active-project-assignments-for-the-currently-authenticated-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List active project assignments for the currently authenticated user'
          schema:
            $ref: '#/definitions/ProjectAssignments'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /users:
    get:
      summary: 'List all users'
      operationId: listUsers
      description: "Returns a list of your users. The users are returned sorted by creation date, with the most recently created users appearing first.\n\nThe response contains an object with a users property that contains an array of up to per_page users. Each entry in the array is a separate user object. If no more users are available, the resulting array will be empty. Several additional pagination properties are included in the response to simplify paginating your users."
      externalDocs:
        description: 'List all users'
        url: 'https://help.getharvest.com/api-v2/users-api/users/users/#list-all-users'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: is_active
          description: 'Pass true to only return active users and false to return inactive users.'
          required: false
          in: query
          type: boolean
        -
          name: updated_since
          description: 'Only return users that have been updated since the given date and time.'
          required: false
          in: query
          type: string
        -
          name: page
          description: 'The page number to use in pagination. For instance, if you make a list request and receive 100 records, your subsequent call can include page=2 to retrieve the next page of the list. (Default: 1)'
          required: false
          in: query
          type: integer
        -
          name: per_page
          description: 'The number of records to return per page. Can range between 1 and 100.  (Default: 100)'
          required: false
          in: query
          type: integer
      responses:
        200:
          description: 'List all users'
          schema:
            $ref: '#/definitions/Users'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: 'Create a user'
      operationId: createUser
      description: 'Creates a new user object. Returns a user object and a 201 Created response code if the call succeeded.'
      externalDocs:
        description: 'Create a user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/users/#create-a-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              first_name:
                type: string
                description: 'The first name of the user.'
              last_name:
                type: string
                description: 'The last name of the user.'
              email:
                type: string
                description: 'The email address of the user.'
                format: email
              timezone:
                type: string
                description: 'The user’s timezone. Defaults to the company’s timezone. See a list of supported time zones.'
              has_access_to_all_future_projects:
                type: boolean
                description: 'Whether the user should be automatically added to future projects. Defaults to false.'
              is_contractor:
                type: boolean
                description: 'Whether the user is a contractor or an employee. Defaults to false.'
              is_admin:
                type: boolean
                description: 'Whether the user has Admin permissions. Defaults to false.'
              is_project_manager:
                type: boolean
                description: 'Whether the user has Project Manager permissions. Defaults to false.'
              can_see_rates:
                type: boolean
                description: 'Whether the user can see billable rates on projects. Only applicable to Project Managers. Defaults to false.'
              can_create_projects:
                type: boolean
                description: 'Whether the user can create projects. Only applicable to Project Managers. Defaults to false.'
              can_create_invoices:
                type: boolean
                description: 'Whether the user can create invoices. Only applicable to Project Managers. Defaults to false.'
              is_active:
                type: boolean
                description: 'Whether the user is active or archived. Defaults to true.'
              weekly_capacity:
                type: integer
                description: 'The number of hours per week this person is available to work in seconds. Defaults to 126000 seconds (35 hours).'
                format: int32
              default_hourly_rate:
                type: number
                description: 'The billable rate to use for this user when they are added to a project. Defaults to 0.'
                format: float
              cost_rate:
                type: number
                description: 'The cost rate to use for this user when calculating a project’s costs vs billable amount. Defaults to 0.'
                format: float
              roles:
                type: array
                description: 'The role names assigned to this person.'
                items:
                  type: string
            required:
              - first_name
              - last_name
              - email
      responses:
        201:
          description: 'Create a user'
          schema:
            $ref: '#/definitions/User'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  /users/me:
    get:
      summary: 'Retrieve the currently authenticated user'
      operationId: retrieveTheCurrentlyAuthenticatedUser
      description: 'Retrieves the currently authenticated user. Returns a user object and a 200 OK response code.'
      externalDocs:
        description: 'Retrieve the currently authenticated user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/users/#retrieve-the-currently-authenticated-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters: []
      responses:
        200:
          description: 'Retrieve the currently authenticated user'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
  '/users/{userId}':
    get:
      summary: 'Retrieve a user'
      operationId: retrieveUser
      description: 'Retrieves the user with the given ID. Returns a user object and a 200 OK response code if a valid identifier was provided.'
      externalDocs:
        description: 'Retrieve a user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/users/#retrieve-a-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Retrieve a user'
          schema:
            $ref: '#/definitions/User'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    patch:
      summary: 'Update a user'
      operationId: updateUser
      description: 'Updates the specific user by setting the values of the parameters passed. Any parameters not provided will be left unchanged. Returns a user object and a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Update a user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/users/#update-a-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
        -
          name: payload
          description: 'json payload'
          required: true
          in: body
          schema:
            type: object
            properties:
              first_name:
                type: string
                description: 'The first name of the user. Can’t be updated if the user is inactive.'
              last_name:
                type: string
                description: 'The last name of the user. Can’t be updated if the user is inactive.'
              email:
                type: string
                description: 'The email address of the user. Can’t be updated if the user is inactive.'
                format: email
              timezone:
                type: string
                description: 'The user’s timezone. Defaults to the company’s timezone. See a list of supported time zones.'
              has_access_to_all_future_projects:
                type: boolean
                description: 'Whether the user should be automatically added to future projects.'
              is_contractor:
                type: boolean
                description: 'Whether the user is a contractor or an employee.'
              is_admin:
                type: boolean
                description: 'Whether the user has Admin permissions.'
              is_project_manager:
                type: boolean
                description: 'Whether the user has Project Manager permissions.'
              can_see_rates:
                type: boolean
                description: 'Whether the user can see billable rates on projects. Only applicable to Project Managers.'
              can_create_projects:
                type: boolean
                description: 'Whether the user can create projects. Only applicable to Project Managers.'
              can_create_invoices:
                type: boolean
                description: 'Whether the user can create invoices. Only applicable to Project Managers.'
              is_active:
                type: boolean
                description: 'Whether the user is active or archived.'
              weekly_capacity:
                type: integer
                description: 'The number of hours per week this person is available to work in seconds.'
                format: int32
              default_hourly_rate:
                type: number
                description: 'The billable rate to use for this user when they are added to a project.'
                format: float
              cost_rate:
                type: number
                description: 'The cost rate to use for this user when calculating a project’s costs vs billable amount.'
                format: float
              roles:
                type: array
                description: 'The role names assigned to this person.'
                items:
                  type: string
      responses:
        200:
          description: 'Update a user'
          schema:
            $ref: '#/definitions/User'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
    delete:
      summary: 'Delete a user'
      operationId: deleteUser
      description: 'Delete a user. Deleting a user is only possible if they have no time entries or expenses associated with them. Returns a 200 OK response code if the call succeeded.'
      externalDocs:
        description: 'Delete a user'
        url: 'https://help.getharvest.com/api-v2/users-api/users/users/#delete-a-user'
      security:
        -
          BearerAuth: []
          AccountAuth: []
      parameters:
        -
          name: userId
          required: true
          in: path
          type: string
      responses:
        200:
          description: 'Delete a user'
        default:
          description: 'error payload'
          schema:
            $ref: '#/definitions/Error'
definitions:
  Contact:
    type: object
    externalDocs:
      description: contact
      url: 'https://help.getharvest.com/api-v2/clients-api/clients/contacts/#the-contact-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the contact.'
        format: int32
      client:
        type: object
        description: 'An object containing the contact’s client id and name.'
        properties:
          id:
            type: integer
          name:
            type: string
      title:
        type: string
        description: 'The title of the contact.'
      first_name:
        type: string
        description: 'The first name of the contact.'
      last_name:
        type: string
        description: 'The last name of the contact.'
      email:
        type: string
        description: 'The contact’s email address.'
        format: email
      phone_office:
        type: string
        description: 'The contact’s office phone number.'
      phone_mobile:
        type: string
        description: 'The contact’s mobile phone number.'
      fax:
        type: string
        description: 'The contact’s fax number.'
      created_at:
        type: string
        description: 'Date and time the contact was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the contact was last updated.'
        format: date-time
  Client:
    type: object
    externalDocs:
      description: client
      url: 'https://help.getharvest.com/api-v2/clients-api/clients/clients/#the-client-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the client.'
        format: int32
      name:
        type: string
        description: 'A textual description of the client.'
      is_active:
        type: boolean
        description: 'Whether the client is active or archived.'
      address:
        type: string
        description: 'The physical address for the client.'
      statement_key:
        type: string
        description: 'Used to build a URL to your client’s invoice dashboard:https://{ACCOUNT_SUBDOMAIN}.harvestapp.com/client/invoices/{statement_key}'
      currency:
        type: string
        description: 'The currency code associated with this client.'
      created_at:
        type: string
        description: 'Date and time the client was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the client was last updated.'
        format: date-time
  Company:
    type: object
    externalDocs:
      description: company
      url: 'https://help.getharvest.com/api-v2/company-api/company/company/#the-company-object'
    properties:
      base_uri:
        type: string
        description: 'The Harvest URL for the company.'
      full_domain:
        type: string
        description: 'The Harvest domain for the company.'
      name:
        type: string
        description: 'The name of the company.'
      is_active:
        type: boolean
        description: 'Whether the company is active or archived.'
      week_start_day:
        type: string
        description: 'The week day used as the start of the week. Returns one of: Saturday, Sunday, or Monday.'
      wants_timestamp_timers:
        type: boolean
        description: 'Whether time is tracked via duration or start and end times.'
      time_format:
        type: string
        description: 'The format used to display time in Harvest. Returns either decimal or hours_minutes.'
      plan_type:
        type: string
        description: 'The type of plan the company is on. Examples: trial, free, or simple-v4'
      clock:
        type: string
        description: 'Used to represent whether the company is using a 12-hour or 24-hour clock. Returns either 12h or 24h.'
      decimal_symbol:
        type: string
        description: 'Symbol used when formatting decimals.'
      thousands_separator:
        type: string
        description: 'Separator used when formatting numbers.'
      color_scheme:
        type: string
        description: 'The color scheme being used in the Harvest web client.'
      weekly_capacity:
        type: integer
        description: 'The weekly capacity in seconds.'
        format: int32
      expense_feature:
        type: boolean
        description: 'Whether the expense module is enabled.'
      invoice_feature:
        type: boolean
        description: 'Whether the invoice module is enabled.'
      estimate_feature:
        type: boolean
        description: 'Whether the estimate module is enabled.'
      approval_feature:
        type: boolean
        description: 'Whether the approval module is enabled.'
  InvoiceMessage:
    type: object
    externalDocs:
      description: invoice-message
      url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-messages/#the-invoice-message-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the message.'
        format: int32
      sent_by:
        type: string
        description: 'Name of the user that created the message.'
      sent_by_email:
        type: string
        description: 'Email of the user that created the message.'
      sent_from:
        type: string
        description: 'Name of the user that the message was sent from.'
      sent_from_email:
        type: string
        description: 'Email of the user that message was sent from.'
      recipients:
        type: array
        description: 'Array of invoice message recipients.'
        items:
          $ref: '#/definitions/InvoiceMessageRecipient'
      subject:
        type: string
        description: 'The message subject.'
      body:
        type: string
        description: 'The message body.'
      include_link_to_client_invoice:
        type: boolean
        description: 'Whether to include a link to the client invoice in the message body. Not used when thank_you is true.'
      attach_pdf:
        type: boolean
        description: 'Whether to attach the invoice PDF to the message email.'
      send_me_a_copy:
        type: boolean
        description: 'Whether to email a copy of the message to the current user.'
      thank_you:
        type: boolean
        description: 'Whether this is a thank you message.'
      event_type:
        type: string
        description: 'The type of invoice event that occurred with the message: send, close, draft, re-open, or view.'
      reminder:
        type: boolean
        description: 'Whether this is a reminder message.'
      send_reminder_on:
        type: string
        description: 'The date the reminder email will be sent.'
        format: date
      created_at:
        type: string
        description: 'Date and time the message was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the message was last updated.'
        format: date-time
  InvoiceMessageRecipient:
    type: object
    externalDocs:
      description: invoice-message-recipient
      url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-messages/#the-invoice-message-recipient-object'
    properties:
      name:
        type: string
        description: 'Name of the message recipient.'
      email:
        type: string
        description: 'Email of the message recipient.'
        format: email
  InvoicePayment:
    type: object
    externalDocs:
      description: invoice-payment
      url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-payments/#the-invoice-payment-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the payment.'
        format: int32
      amount:
        type: number
        description: 'The amount of the payment.'
        format: float
      paid_at:
        type: string
        description: 'Date and time the payment was made.'
        format: date-time
      paid_date:
        type: string
        description: 'Date the payment was made.'
        format: date
      recorded_by:
        type: string
        description: 'The name of the person who recorded the payment.'
      recorded_by_email:
        type: string
        description: 'The email of the person who recorded the payment.'
      notes:
        type: string
        description: 'Any notes associated with the payment.'
      transaction_id:
        type: string
        description: 'Either the card authorization or PayPal transaction ID.'
      payment_gateway:
        type: object
        description: 'The payment gateway id and name used to process the payment.'
        properties:
          id:
            type: integer
          name:
            type: string
      created_at:
        type: string
        description: 'Date and time the payment was recorded.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the payment was last updated.'
        format: date-time
  Invoice:
    type: object
    externalDocs:
      description: invoice
      url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#the-invoice-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the invoice.'
        format: int32
      client:
        type: object
        description: 'An object containing invoice’s client id and name.'
        properties:
          id:
            type: integer
          name:
            type: string
      line_items:
        type: array
        description: 'Array of invoice line items.'
        items:
          $ref: '#/definitions/InvoiceLineItem'
      estimate:
        type: object
        description: 'An object containing the associated estimate’s id.'
        properties:
          id:
            type: integer
      retainer:
        type: object
        description: 'An object containing the associated retainer’s id.'
        properties:
          id:
            type: integer
      creator:
        type: object
        description: 'An object containing the id and name of the person that created the invoice.'
        properties:
          id:
            type: integer
          name:
            type: string
      client_key:
        type: string
        description: 'Used to build a URL to the public web invoice for your client:https://{ACCOUNT_SUBDOMAIN}.harvestapp.com/client/invoices/abc123456'
      number:
        type: string
        description: 'If no value is set, the number will be automatically generated.'
      purchase_order:
        type: string
        description: 'The purchase order number.'
      amount:
        type: number
        description: 'The total amount for the invoice, including any discounts and taxes.'
        format: float
      due_amount:
        type: number
        description: 'The total amount due at this time for this invoice.'
        format: float
      tax:
        type: number
        description: 'This percentage is applied to the subtotal, including line items and discounts.'
        format: float
      tax_amount:
        type: number
        description: 'The first amount of tax included, calculated from tax. If no tax is defined, this value will be null.'
        format: float
      tax2:
        type: number
        description: 'This percentage is applied to the subtotal, including line items and discounts.'
        format: float
      tax2_amount:
        type: number
        description: 'The amount calculated from tax2.'
        format: float
      discount:
        type: number
        description: 'This percentage is subtracted from the subtotal.'
        format: float
      discount_amount:
        type: number
        description: 'The amount calcuated from discount.'
        format: float
      subject:
        type: string
        description: 'The invoice subject.'
      notes:
        type: string
        description: 'Any additional notes included on the invoice.'
      currency:
        type: string
        description: 'The currency code associated with this invoice.'
      state:
        type: string
        description: 'The current state of the invoice: draft, open, paid, or closed.'
      period_start:
        type: string
        description: 'Start of the period during which time entries were added to this invoice.'
        format: date
      period_end:
        type: string
        description: 'End of the period during which time entries were added to this invoice.'
        format: date
      issue_date:
        type: string
        description: 'Date the invoice was issued.'
        format: date
      due_date:
        type: string
        description: 'Date the invoice is due.'
        format: date
      payment_term:
        type: string
        description: 'The timeframe in which the invoice should be paid. Options: upon receipt, net 15, net 30, net 45, net 60, or custom.'
      sent_at:
        type: string
        description: 'Date and time the invoice was sent.'
        format: date-time
      paid_at:
        type: string
        description: 'Date and time the invoice was paid.'
        format: date-time
      paid_date:
        type: string
        description: 'Date the invoice was paid.'
        format: date
      closed_at:
        type: string
        description: 'Date and time the invoice was closed.'
        format: date-time
      recurring_invoice_id:
        type: integer
        description: 'Unique ID of the associated recurring invoice.'
        format: int32
      created_at:
        type: string
        description: 'Date and time the invoice was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the invoice was last updated.'
        format: date-time
  InvoiceLineItem:
    type: object
    externalDocs:
      description: invoice-line-item
      url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoices/#the-invoice-line-item-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the line item.'
        format: int32
      project:
        type: object
        description: 'An object containing the associated project’s id, name, and code.'
        properties:
          id:
            type: integer
          name:
            type: string
          code:
            type: string
      kind:
        type: string
        description: 'The name of an invoice item category.'
      description:
        type: string
        description: 'Text description of the line item.'
      quantity:
        type: number
        description: 'The unit quantity of the item.'
        format: float
      unit_price:
        type: number
        description: 'The individual price per unit.'
        format: float
      amount:
        type: number
        description: 'The line item subtotal (quantity * unit_price).'
        format: float
      taxed:
        type: boolean
        description: 'Whether the invoice’s tax percentage applies to this line item.'
      taxed2:
        type: boolean
        description: 'Whether the invoice’s tax2 percentage applies to this line item.'
  InvoiceItemCategory:
    type: object
    externalDocs:
      description: invoice-item-category
      url: 'https://help.getharvest.com/api-v2/invoices-api/invoices/invoice-item-categories/#the-invoice-item-category-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the invoice item category.'
        format: int32
      name:
        type: string
        description: 'The name of the invoice item category.'
      use_as_service:
        type: boolean
        description: 'Whether this invoice item category is used for billable hours when generating an invoice.'
      use_as_expense:
        type: boolean
        description: 'Whether this invoice item category is used for expenses when generating an invoice.'
      created_at:
        type: string
        description: 'Date and time the invoice item category was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the invoice item category was last updated.'
        format: date-time
  EstimateMessage:
    type: object
    externalDocs:
      description: estimate-message
      url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-messages/#the-estimate-message-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the message.'
        format: int32
      sent_by:
        type: string
        description: 'Name of the user that created the message.'
      sent_by_email:
        type: string
        description: 'Email of the user that created the message.'
      sent_from:
        type: string
        description: 'Name of the user that the message was sent from.'
      sent_from_email:
        type: string
        description: 'Email of the user that message was sent from.'
      recipients:
        type: array
        description: 'Array of estimate message recipients.'
        items:
          $ref: '#/definitions/EstimateMessageRecipient'
      subject:
        type: string
        description: 'The message subject.'
      body:
        type: string
        description: 'The message body.'
      send_me_a_copy:
        type: boolean
        description: 'Whether to email a copy of the message to the current user.'
      event_type:
        type: string
        description: 'The type of estimate event that occurred with the message: send, accept, decline, re-open, view, or invoice.'
      created_at:
        type: string
        description: 'Date and time the message was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the message was last updated.'
        format: date-time
  EstimateMessageRecipient:
    type: object
    externalDocs:
      description: estimate-message-recipient
      url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-messages/#the-estimate-message-recipient-object'
    properties:
      name:
        type: string
        description: 'Name of the message recipient.'
      email:
        type: string
        description: 'Email of the message recipient.'
        format: email
  Estimate:
    type: object
    externalDocs:
      description: estimate
      url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#the-estimate-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the estimate.'
        format: int32
      client:
        type: object
        description: 'An object containing estimate’s client id and name.'
        properties:
          id:
            type: integer
          name:
            type: string
      line_items:
        type: array
        description: 'Array of estimate line items.'
        items:
          $ref: '#/definitions/EstimateLineItem'
      creator:
        type: object
        description: 'An object containing the id and name of the person that created the estimate.'
        properties:
          id:
            type: integer
          name:
            type: string
      client_key:
        type: string
        description: 'Used to build a URL to the public web invoice for your client:https://{ACCOUNT_SUBDOMAIN}.harvestapp.com/client/estimates/abc123456'
      number:
        type: string
        description: 'If no value is set, the number will be automatically generated.'
      purchase_order:
        type: string
        description: 'The purchase order number.'
      amount:
        type: number
        description: 'The total amount for the estimate, including any discounts and taxes.'
        format: float
      tax:
        type: number
        description: 'This percentage is applied to the subtotal, including line items and discounts.'
        format: float
      tax_amount:
        type: number
        description: 'The first amount of tax included, calculated from tax. If no tax is defined, this value will be null.'
        format: float
      tax2:
        type: number
        description: 'This percentage is applied to the subtotal, including line items and discounts.'
        format: float
      tax2_amount:
        type: number
        description: 'The amount calculated from tax2.'
        format: float
      discount:
        type: number
        description: 'This percentage is subtracted from the subtotal.'
        format: float
      discount_amount:
        type: number
        description: 'The amount calcuated from discount.'
        format: float
      subject:
        type: string
        description: 'The estimate subject.'
      notes:
        type: string
        description: 'Any additional notes included on the estimate.'
      currency:
        type: string
        description: 'The currency code associated with this estimate.'
      state:
        type: string
        description: 'The current state of the estimate: draft, sent, accepted, or declined.'
      issue_date:
        type: string
        description: 'Date the estimate was issued.'
        format: date
      sent_at:
        type: string
        description: 'Date and time the estimate was sent.'
        format: date-time
      accepted_at:
        type: string
        description: 'Date and time the estimate was accepted.'
        format: date-time
      declined_at:
        type: string
        description: 'Date and time the estimate was declined.'
        format: date-time
      created_at:
        type: string
        description: 'Date and time the estimate was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the estimate was last updated.'
        format: date-time
  EstimateLineItem:
    type: object
    externalDocs:
      description: estimate-line-item
      url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimates/#the-estimate-line-item-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the line item.'
        format: int32
      kind:
        type: string
        description: 'The name of an estimate item category.'
      description:
        type: string
        description: 'Text description of the line item.'
      quantity:
        type: number
        description: 'The unit quantity of the item.'
        format: float
      unit_price:
        type: number
        description: 'The individual price per unit.'
        format: float
      amount:
        type: number
        description: 'The line item subtotal (quantity * unit_price).'
        format: float
      taxed:
        type: boolean
        description: 'Whether the estimate’s tax percentage applies to this line item.'
      taxed2:
        type: boolean
        description: 'Whether the estimate’s tax2 percentage applies to this line item.'
  EstimateItemCategory:
    type: object
    externalDocs:
      description: estimate-item-category
      url: 'https://help.getharvest.com/api-v2/estimates-api/estimates/estimate-item-categories/#the-estimate-item-category-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the estimate item category.'
        format: int32
      name:
        type: string
        description: 'The name of the estimate item category.'
      created_at:
        type: string
        description: 'Date and time the estimate item category was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the estimate item category was last updated.'
        format: date-time
  Expense:
    type: object
    externalDocs:
      description: expense
      url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expenses/#the-expense-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the expense.'
        format: int32
      client:
        type: object
        description: 'An object containing the expense’s client id, name, and currency.'
        properties:
          id:
            type: integer
          name:
            type: string
          currency:
            type: string
      project:
        type: object
        description: 'An object containing the expense’s project id, name, and code.'
        properties:
          id:
            type: integer
          name:
            type: string
          code:
            type: string
      expense_category:
        type: object
        description: 'An object containing the expense’s expense category id, name, unit_price, and unit_name.'
        properties:
          id:
            type: integer
          name:
            type: string
          unit_price:
            type: string
          unit_name:
            type: string
      user:
        type: object
        description: 'An object containing the id and name of the user that recorded the expense.'
        properties:
          id:
            type: integer
          name:
            type: string
      user_assignment:
        type: object
        description: 'A user assignment object of the user that recorded the expense.'
        $ref: '#/definitions/UserAssignment'
      receipt:
        type: object
        description: 'An object containing the expense’s receipt URL and file name.'
        properties:
          URL:
            type: string
          file_name:
            type: string
      invoice:
        type: object
        description: 'Once the expense has been invoiced, this field will include the associated invoice’s id and number.'
        properties:
          id:
            type: integer
          number:
            type: string
      notes:
        type: string
        description: 'Textual notes used to describe the expense.'
      billable:
        type: boolean
        description: 'Whether the expense is billable or not.'
      is_closed:
        type: boolean
        description: 'Whether the expense has been approved or closed for some other reason.'
      is_locked:
        type: boolean
        description: 'Whether the expense has been been invoiced, approved, or the project or person related to the expense is archived.'
      is_billed:
        type: boolean
        description: 'Whether or not the expense has been marked as invoiced.'
      locked_reason:
        type: string
        description: 'An explanation of why the expense has been locked.'
      spent_date:
        type: string
        description: 'Date the expense occurred.'
        format: date
      created_at:
        type: string
        description: 'Date and time the expense was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the expense was last updated.'
        format: date-time
  ExpenseCategory:
    type: object
    externalDocs:
      description: expense-category
      url: 'https://help.getharvest.com/api-v2/expenses-api/expenses/expense-categories/#the-expense-category-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the expense category.'
        format: int32
      name:
        type: string
        description: 'The name of the expense category.'
      unit_name:
        type: string
        description: 'The unit name of the expense category.'
      unit_price:
        type: number
        description: 'The unit price of the expense category.'
        format: float
      is_active:
        type: boolean
        description: 'Whether the expense category is active or archived.'
      created_at:
        type: string
        description: 'Date and time the expense category was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the expense category was last updated.'
        format: date-time
  Task:
    type: object
    externalDocs:
      description: task
      url: 'https://help.getharvest.com/api-v2/tasks-api/tasks/tasks/#the-task-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the task.'
        format: int32
      name:
        type: string
        description: 'The name of the task.'
      billable_by_default:
        type: boolean
        description: 'Used in determining whether default tasks should be marked billable when creating a new project.'
      default_hourly_rate:
        type: number
        description: 'The hourly rate to use for this task when it is added to a project.'
        format: float
      is_default:
        type: boolean
        description: 'Whether this task should be automatically added to future projects.'
      is_active:
        type: boolean
        description: 'Whether this task is active or archived.'
      created_at:
        type: string
        description: 'Date and time the task was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the task was last updated.'
        format: date-time
  TimeEntry:
    type: object
    externalDocs:
      description: time-entry
      url: 'https://help.getharvest.com/api-v2/timesheets-api/timesheets/time-entries/#the-time-entry-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the time entry.'
        format: int32
      spent_date:
        type: string
        description: 'Date of the time entry.'
        format: date
      user:
        type: object
        description: 'An object containing the id and name of the associated user.'
        properties:
          id:
            type: integer
          name:
            type: string
      user_assignment:
        type: object
        description: 'A user assignment object of the associated user.'
        $ref: '#/definitions/UserAssignment'
      client:
        type: object
        description: 'An object containing the id and name of the associated client.'
        properties:
          id:
            type: integer
          name:
            type: string
      project:
        type: object
        description: 'An object containing the id and name of the associated project.'
        properties:
          id:
            type: integer
          name:
            type: string
      task:
        type: object
        description: 'An object containing the id and name of the associated task.'
        properties:
          id:
            type: integer
          name:
            type: string
      task_assignment:
        type: object
        description: 'A task assignment object of the associated task.'
        $ref: '#/definitions/TaskAssignment'
      external_reference:
        type: object
        description: 'An object containing the id, group_id, permalink, service, and service_icon_url of the associated external reference.'
        properties:
          id:
            type: string
          group_id:
            type: string
          permalink:
            type: string
          service:
            type: string
          service_icon_url:
            type: string
      invoice:
        type: object
        description: 'Once the time entry has been invoiced, this field will include the associated invoice’s id and number.'
        properties:
          id:
            type: integer
          number:
            type: string
      hours:
        type: number
        description: 'Number of (decimal time) hours tracked in this time entry.'
        format: float
      notes:
        type: string
        description: 'Notes attached to the time entry.'
      is_locked:
        type: boolean
        description: 'Whether or not the time entry has been locked.'
      locked_reason:
        type: string
        description: 'Why the time entry has been locked.'
      is_closed:
        type: boolean
        description: 'Whether or not the time entry has been approved via Timesheet Approval.'
      is_billed:
        type: boolean
        description: 'Whether or not the time entry has been marked as invoiced.'
      timer_started_at:
        type: string
        description: 'Date and time the timer was started (if tracking by duration). Use the ISO 8601 Format.'
        format: date-time
      started_time:
        type: string
        description: 'Time the time entry was started (if tracking by start/end times).'
      ended_time:
        type: string
        description: 'Time the time entry was ended (if tracking by start/end times).'
      is_running:
        type: boolean
        description: 'Whether or not the time entry is currently running.'
      billable:
        type: boolean
        description: 'Whether or not the time entry is billable.'
      budgeted:
        type: boolean
        description: 'Whether or not the time entry counts towards the project budget.'
      billable_rate:
        type: number
        description: 'The billable rate for the time entry.'
        format: float
      cost_rate:
        type: number
        description: 'The cost rate for the time entry.'
        format: float
      created_at:
        type: string
        description: 'Date and time the time entry was created. Use the ISO 8601 Format.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the time entry was last updated. Use the ISO 8601 Format.'
        format: date-time
  UserAssignment:
    type: object
    externalDocs:
      description: user-assignment
      url: 'https://help.getharvest.com/api-v2/projects-api/projects/user-assignments/#the-user-assignment-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the user assignment.'
        format: int32
      project:
        type: object
        description: 'An object containing the id, name, and code of the associated project.'
        properties:
          id:
            type: integer
          name:
            type: string
          code:
            type: string
      user:
        type: object
        description: 'An object containing the id and name of the associated user.'
        properties:
          id:
            type: integer
          name:
            type: string
      is_active:
        type: boolean
        description: 'Whether the user assignment is active or archived.'
      is_project_manager:
        type: boolean
        description: 'Determines if the user has Project Manager permissions for the project.'
      use_default_rates:
        type: boolean
        description: 'Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment.'
      hourly_rate:
        type: number
        description: 'Custom rate used when the project’s bill_by is People and use_default_rates is false.'
        format: float
      budget:
        type: number
        description: 'Budget used when the project’s budget_by is person.'
        format: float
      created_at:
        type: string
        description: 'Date and time the user assignment was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the user assignment was last updated.'
        format: date-time
  TaskAssignment:
    type: object
    externalDocs:
      description: task-assignment
      url: 'https://help.getharvest.com/api-v2/projects-api/projects/task-assignments/#the-task-assignment-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the task assignment.'
        format: int32
      project:
        type: object
        description: 'An object containing the id, name, and code of the associated project.'
        properties:
          id:
            type: integer
          name:
            type: string
          code:
            type: string
      task:
        type: object
        description: 'An object containing the id and name of the associated task.'
        properties:
          id:
            type: integer
          name:
            type: string
      is_active:
        type: boolean
        description: 'Whether the task assignment is active or archived.'
      billable:
        type: boolean
        description: 'Whether the task assignment is billable or not.  For example: if set to true, all time tracked on this project for the associated task will be marked as billable.'
      hourly_rate:
        type: number
        description: 'Rate used when the project’s bill_by is Tasks.'
        format: float
      budget:
        type: number
        description: 'Budget used when the project’s budget_by is task or task_fees.'
        format: float
      created_at:
        type: string
        description: 'Date and time the task assignment was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the task assignment was last updated.'
        format: date-time
  Project:
    type: object
    externalDocs:
      description: project
      url: 'https://help.getharvest.com/api-v2/projects-api/projects/projects/#the-project-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the project.'
        format: int32
      client:
        type: object
        description: 'An object containing the project’s client id, name, and currency.'
        properties:
          id:
            type: integer
          name:
            type: string
          currency:
            type: string
      name:
        type: string
        description: 'Unique name for the project.'
      code:
        type: string
        description: 'The code associated with the project.'
      is_active:
        type: boolean
        description: 'Whether the project is active or archived.'
      is_billable:
        type: boolean
        description: 'Whether the project is billable or not.'
      is_fixed_fee:
        type: boolean
        description: 'Whether the project is a fixed-fee project or not.'
      bill_by:
        type: string
        description: 'The method by which the project is invoiced.'
      hourly_rate:
        type: number
        description: 'Rate for projects billed by Project Hourly Rate.'
        format: float
      budget:
        type: number
        description: 'The budget in hours for the project when budgeting by time.'
        format: float
      budget_by:
        type: string
        description: 'The method by which the project is budgeted.'
      budget_is_monthly:
        type: boolean
        description: 'Option to have the budget reset every month.'
      notify_when_over_budget:
        type: boolean
        description: 'Whether Project Managers should be notified when the project goes over budget.'
      over_budget_notification_percentage:
        type: number
        description: 'Percentage value used to trigger over budget email alerts.'
        format: float
      over_budget_notification_date:
        type: string
        description: 'Date of last over budget notification. If none have been sent, this will be null.'
        format: date
      show_budget_to_all:
        type: boolean
        description: 'Option to show project budget to all employees. Does not apply to Total Project Fee projects.'
      cost_budget:
        type: number
        description: 'The monetary budget for the project when budgeting by money.'
        format: float
      cost_budget_include_expenses:
        type: boolean
        description: 'Option for budget of Total Project Fees projects to include tracked expenses.'
      fee:
        type: number
        description: 'The amount you plan to invoice for the project. Only used by fixed-fee projects.'
        format: float
      notes:
        type: string
        description: 'Project notes.'
      starts_on:
        type: string
        description: 'Date the project was started.'
        format: date
      ends_on:
        type: string
        description: 'Date the project will end.'
        format: date
      created_at:
        type: string
        description: 'Date and time the project was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the project was last updated.'
        format: date-time
  Role:
    type: object
    externalDocs:
      description: role
      url: 'https://help.getharvest.com/api-v2/roles-api/roles/roles/#the-role-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the role.'
        format: int32
      name:
        type: string
        description: 'The name of the role.'
      user_ids:
        type: array
        description: 'The IDs of the users assigned to this role.'
        items:
          type: integer
      created_at:
        type: string
        description: 'Date and time the role was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the role was last updated.'
        format: date-time
  BillableRate:
    type: object
    externalDocs:
      description: billable-rate
      url: 'https://help.getharvest.com/api-v2/users-api/users/billable-rates/#the-billable-rate-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the billable rate.'
        format: int32
      amount:
        type: number
        description: 'The amount of the billable rate.'
        format: float
      start_date:
        type: string
        description: 'The date the billable rate is effective.'
        format: date
      end_date:
        type: string
        description: 'The date the billable rate is no longer effective. This date is calculated by Harvest.'
        format: date
      created_at:
        type: string
        description: 'Date and time the billable rate was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the billable rate was last updated.'
        format: date-time
  CostRate:
    type: object
    externalDocs:
      description: cost-rate
      url: 'https://help.getharvest.com/api-v2/users-api/users/cost-rates/#the-cost-rate-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the cost rate.'
        format: int32
      amount:
        type: number
        description: 'The amount of the cost rate.'
        format: float
      start_date:
        type: string
        description: 'The date the cost rate is effective.'
        format: date
      end_date:
        type: string
        description: 'The date the cost rate is no longer effective. This date is calculated by Harvest.'
        format: date
      created_at:
        type: string
        description: 'Date and time the cost rate was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the cost rate was last updated.'
        format: date-time
  ProjectAssignment:
    type: object
    externalDocs:
      description: project-assignment
      url: 'https://help.getharvest.com/api-v2/users-api/users/project-assignments/#the-project-assignment-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the project assignment.'
        format: int32
      is_active:
        type: boolean
        description: 'Whether the project assignment is active or archived.'
      is_project_manager:
        type: boolean
        description: 'Determines if the user has Project Manager permissions for the project.'
      use_default_rates:
        type: boolean
        description: 'Determines which billable rate(s) will be used on the project for this user when bill_by is People. When true, the project will use the user’s default billable rates. When false, the project will use the custom rate defined on this user assignment.'
      hourly_rate:
        type: number
        description: 'Custom rate used when the project’s bill_by is People and use_default_rates is false.'
        format: float
      budget:
        type: number
        description: 'Budget used when the project’s budget_by is person.'
        format: float
      created_at:
        type: string
        description: 'Date and time the project assignment was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the project assignment was last updated.'
        format: date-time
      project:
        type: object
        description: 'An object containing the assigned project id, name, and code.'
        properties:
          id:
            type: integer
          name:
            type: string
          code:
            type: string
      client:
        type: object
        description: 'An object containing the project’s client id and name.'
        properties:
          id:
            type: integer
          name:
            type: string
      task_assignments:
        type: array
        description: 'Array of task assignment objects associated with the project.'
        items:
          $ref: '#/definitions/TaskAssignment'
  User:
    type: object
    externalDocs:
      description: user
      url: 'https://help.getharvest.com/api-v2/users-api/users/users/#the-user-object'
    properties:
      id:
        type: integer
        description: 'Unique ID for the user.'
        format: int32
      first_name:
        type: string
        description: 'The first name of the user.'
      last_name:
        type: string
        description: 'The last name of the user.'
      email:
        type: string
        description: 'The email address of the user.'
        format: email
      timezone:
        type: string
        description: 'The user’s timezone.'
      has_access_to_all_future_projects:
        type: boolean
        description: 'Whether the user should be automatically added to future projects.'
      is_contractor:
        type: boolean
        description: 'Whether the user is a contractor or an employee.'
      is_admin:
        type: boolean
        description: 'Whether the user has Admin permissions.'
      is_project_manager:
        type: boolean
        description: 'Whether the user has Project Manager permissions.'
      can_see_rates:
        type: boolean
        description: 'Whether the user can see billable rates on projects. Only applicable to Project Managers.'
      can_create_projects:
        type: boolean
        description: 'Whether the user can create projects. Only applicable to Project Managers.'
      can_create_invoices:
        type: boolean
        description: 'Whether the user can create invoices. Only applicable to Project Managers.'
      is_active:
        type: boolean
        description: 'Whether the user is active or archived.'
      weekly_capacity:
        type: integer
        description: 'The number of hours per week this person is available to work in seconds, in half hour increments. For example, if a person’s capacity is 35 hours, the API will return 126000 seconds.'
        format: int32
      default_hourly_rate:
        type: number
        description: 'The billable rate to use for this user when they are added to a project.'
        format: float
      cost_rate:
        type: number
        description: 'The cost rate to use for this user when calculating a project’s costs vs billable amount.'
        format: float
      roles:
        type: array
        description: 'The role names assigned to this person.'
        items:
          type: string
      avatar_url:
        type: string
        description: 'The URL to the user’s avatar image.'
      created_at:
        type: string
        description: 'Date and time the user was created.'
        format: date-time
      updated_at:
        type: string
        description: 'Date and time the user was last updated.'
        format: date-time
  Contacts:
    type: object
    required:
      - contacts
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      contacts:
        type: array
        items:
          $ref: '#/definitions/Contact'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Clients:
    type: object
    required:
      - clients
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      clients:
        type: array
        items:
          $ref: '#/definitions/Client'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Companies:
    type: object
    required:
      - companies
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      companies:
        type: array
        items:
          $ref: '#/definitions/Company'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  InvoiceMessages:
    type: object
    required:
      - invoice_messages
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      invoice_messages:
        type: array
        items:
          $ref: '#/definitions/InvoiceMessage'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  InvoiceMessageRecipients:
    type: object
    required:
      - invoice_message_recipients
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      invoice_message_recipients:
        type: array
        items:
          $ref: '#/definitions/InvoiceMessageRecipient'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  InvoicePayments:
    type: object
    required:
      - invoice_payments
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      invoice_payments:
        type: array
        items:
          $ref: '#/definitions/InvoicePayment'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Invoices:
    type: object
    required:
      - invoices
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      invoices:
        type: array
        items:
          $ref: '#/definitions/Invoice'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  InvoiceLineItems:
    type: object
    required:
      - invoice_line_items
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      invoice_line_items:
        type: array
        items:
          $ref: '#/definitions/InvoiceLineItem'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  InvoiceItemCategories:
    type: object
    required:
      - invoice_item_categories
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      invoice_item_categories:
        type: array
        items:
          $ref: '#/definitions/InvoiceItemCategory'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  EstimateMessages:
    type: object
    required:
      - estimate_messages
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      estimate_messages:
        type: array
        items:
          $ref: '#/definitions/EstimateMessage'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  EstimateMessageRecipients:
    type: object
    required:
      - estimate_message_recipients
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      estimate_message_recipients:
        type: array
        items:
          $ref: '#/definitions/EstimateMessageRecipient'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Estimates:
    type: object
    required:
      - estimates
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      estimates:
        type: array
        items:
          $ref: '#/definitions/Estimate'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  EstimateLineItems:
    type: object
    required:
      - estimate_line_items
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      estimate_line_items:
        type: array
        items:
          $ref: '#/definitions/EstimateLineItem'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  EstimateItemCategories:
    type: object
    required:
      - estimate_item_categories
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      estimate_item_categories:
        type: array
        items:
          $ref: '#/definitions/EstimateItemCategory'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Expenses:
    type: object
    required:
      - expenses
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      expenses:
        type: array
        items:
          $ref: '#/definitions/Expense'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  ExpenseCategories:
    type: object
    required:
      - expense_categories
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      expense_categories:
        type: array
        items:
          $ref: '#/definitions/ExpenseCategory'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Tasks:
    type: object
    required:
      - tasks
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      tasks:
        type: array
        items:
          $ref: '#/definitions/Task'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  TimeEntries:
    type: object
    required:
      - time_entries
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      time_entries:
        type: array
        items:
          $ref: '#/definitions/TimeEntry'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  UserAssignments:
    type: object
    required:
      - user_assignments
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      user_assignments:
        type: array
        items:
          $ref: '#/definitions/UserAssignment'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  TaskAssignments:
    type: object
    required:
      - task_assignments
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      task_assignments:
        type: array
        items:
          $ref: '#/definitions/TaskAssignment'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Projects:
    type: object
    required:
      - projects
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Roles:
    type: object
    required:
      - roles
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      roles:
        type: array
        items:
          $ref: '#/definitions/Role'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  BillableRates:
    type: object
    required:
      - billable_rates
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      billable_rates:
        type: array
        items:
          $ref: '#/definitions/BillableRate'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  CostRates:
    type: object
    required:
      - cost_rates
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      cost_rates:
        type: array
        items:
          $ref: '#/definitions/CostRate'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  ProjectAssignments:
    type: object
    required:
      - project_assignments
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      project_assignments:
        type: array
        items:
          $ref: '#/definitions/ProjectAssignment'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Users:
    type: object
    required:
      - users
      - per_page
      - total_pages
      - total_entries
      - next_page
      - previous_page
      - page
      - links
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/User'
      per_page:
        type: integer
        format: int64
      total_pages:
        type: integer
        format: int64
      total_entries:
        type: integer
        format: int64
      next_page:
        type: integer
        format: int64
      previous_page:
        type: integer
        format: int64
      page:
        type: integer
        format: int64
      links:
        $ref: '#/definitions/PaginationLinks'
  Error:
    type: object
    properties:
      code:
        type: integer
      message:
        type: string
  PaginationLinks:
    type: object
    required:
      - first
      - last
    properties:
      first:
        type: string
        format: url
        description: 'First page'
      last:
        type: string
        format: url
        description: 'Last page'
      previous:
        type: string
        format: url
        description: 'Previous page'
      next:
        type: string
        format: url
        description: 'Next page'
